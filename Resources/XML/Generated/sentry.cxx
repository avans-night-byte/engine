// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "sentry.hxx"

// sentry
// 

const sentry::className_type& sentry::
className () const
{
  return this->className_.get ();
}

sentry::className_type& sentry::
className ()
{
  return this->className_.get ();
}

void sentry::
className (const className_type& x)
{
  this->className_.set (x);
}

void sentry::
className (::std::unique_ptr< className_type > x)
{
  this->className_.set (std::move (x));
}

const sentry::resources_type& sentry::
resources () const
{
  return this->resources_.get ();
}

sentry::resources_type& sentry::
resources ()
{
  return this->resources_.get ();
}

void sentry::
resources (const resources_type& x)
{
  this->resources_.set (x);
}

void sentry::
resources (::std::unique_ptr< resources_type > x)
{
  this->resources_.set (std::move (x));
}

const sentry::collider_type& sentry::
collider () const
{
  return this->collider_.get ();
}

sentry::collider_type& sentry::
collider ()
{
  return this->collider_.get ();
}

void sentry::
collider (const collider_type& x)
{
  this->collider_.set (x);
}

void sentry::
collider (::std::unique_ptr< collider_type > x)
{
  this->collider_.set (std::move (x));
}

const sentry::events_type& sentry::
events () const
{
  return this->events_.get ();
}

sentry::events_type& sentry::
events ()
{
  return this->events_.get ();
}

void sentry::
events (const events_type& x)
{
  this->events_.set (x);
}

void sentry::
events (::std::unique_ptr< events_type > x)
{
  this->events_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// sentry
//

sentry::
sentry (const className_type& className,
        const resources_type& resources,
        const collider_type& collider,
        const events_type& events)
: ::xml_schema::type (),
  className_ (className, this),
  resources_ (resources, this),
  collider_ (collider, this),
  events_ (events, this)
{
}

sentry::
sentry (const className_type& className,
        ::std::unique_ptr< resources_type > resources,
        ::std::unique_ptr< collider_type > collider,
        ::std::unique_ptr< events_type > events)
: ::xml_schema::type (),
  className_ (className, this),
  resources_ (std::move (resources), this),
  collider_ (std::move (collider), this),
  events_ (std::move (events), this)
{
}

sentry::
sentry (const sentry& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  className_ (x.className_, f, this),
  resources_ (x.resources_, f, this),
  collider_ (x.collider_, f, this),
  events_ (x.events_, f, this)
{
}

sentry::
sentry (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  className_ (this),
  resources_ (this),
  collider_ (this),
  events_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void sentry::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // className
    //
    if (n.name () == "className" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< className_type > r (
        className_traits::create (i, f, this));

      if (!className_.present ())
      {
        this->className_.set (::std::move (r));
        continue;
      }
    }

    // resources
    //
    if (n.name () == "resources" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< resources_type > r (
        resources_traits::create (i, f, this));

      if (!resources_.present ())
      {
        this->resources_.set (::std::move (r));
        continue;
      }
    }

    // collider
    //
    if (n.name () == "collider" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< collider_type > r (
        collider_traits::create (i, f, this));

      if (!collider_.present ())
      {
        this->collider_.set (::std::move (r));
        continue;
      }
    }

    // events
    //
    if (n.name () == "events" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< events_type > r (
        events_traits::create (i, f, this));

      if (!events_.present ())
      {
        this->events_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!className_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "className",
      "");
  }

  if (!resources_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "resources",
      "");
  }

  if (!collider_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "collider",
      "");
  }

  if (!events_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "events",
      "");
  }
}

sentry* sentry::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sentry (*this, f, c);
}

sentry& sentry::
operator= (const sentry& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->className_ = x.className_;
    this->resources_ = x.resources_;
    this->collider_ = x.collider_;
    this->events_ = x.events_;
  }

  return *this;
}

sentry::
~sentry ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::sentry >
sentry_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sentry_ (isrc, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sentry_ (isrc, h, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::sentry_ (isrc, h, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sentry_ (isrc, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sentry_ (isrc, h, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::sentry_ (isrc, h, f, p);
}

::std::unique_ptr< ::sentry >
sentry_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::sentry > (
    ::sentry_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::sentry >
sentry_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::sentry > (
      ::sentry_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "sentry" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::sentry > r (
      ::xsd::cxx::tree::traits< ::sentry, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "sentry",
    "");
}

::std::unique_ptr< ::sentry >
sentry_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "sentry" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::sentry > r (
      ::xsd::cxx::tree::traits< ::sentry, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "sentry",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

