// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "wall.hxx"

// walls
// 

const walls::className_type& walls::
className () const
{
  return this->className_.get ();
}

walls::className_type& walls::
className ()
{
  return this->className_.get ();
}

void walls::
className (const className_type& x)
{
  this->className_.set (x);
}

void walls::
className (::std::unique_ptr< className_type > x)
{
  this->className_.set (std::move (x));
}

const walls::wall_sequence& walls::
wall () const
{
  return this->wall_;
}

walls::wall_sequence& walls::
wall ()
{
  return this->wall_;
}

void walls::
wall (const wall_sequence& s)
{
  this->wall_ = s;
}


// wall
// 

const wall::name_type& wall::
name () const
{
  return this->name_.get ();
}

wall::name_type& wall::
name ()
{
  return this->name_.get ();
}

void wall::
name (const name_type& x)
{
  this->name_.set (x);
}

void wall::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}

const wall::level_type& wall::
level () const
{
  return this->level_.get ();
}

wall::level_type& wall::
level ()
{
  return this->level_.get ();
}

void wall::
level (const level_type& x)
{
  this->level_.set (x);
}

void wall::
level (::std::unique_ptr< level_type > x)
{
  this->level_.set (std::move (x));
}

const wall::baseHealth_type& wall::
baseHealth () const
{
  return this->baseHealth_.get ();
}

wall::baseHealth_type& wall::
baseHealth ()
{
  return this->baseHealth_.get ();
}

void wall::
baseHealth (const baseHealth_type& x)
{
  this->baseHealth_.set (x);
}

const wall::pricing_type& wall::
pricing () const
{
  return this->pricing_.get ();
}

wall::pricing_type& wall::
pricing ()
{
  return this->pricing_.get ();
}

void wall::
pricing (const pricing_type& x)
{
  this->pricing_.set (x);
}

void wall::
pricing (::std::unique_ptr< pricing_type > x)
{
  this->pricing_.set (std::move (x));
}

const wall::powers_optional& wall::
powers () const
{
  return this->powers_;
}

wall::powers_optional& wall::
powers ()
{
  return this->powers_;
}

void wall::
powers (const powers_type& x)
{
  this->powers_.set (x);
}

void wall::
powers (const powers_optional& x)
{
  this->powers_ = x;
}

void wall::
powers (::std::unique_ptr< powers_type > x)
{
  this->powers_.set (std::move (x));
}

const wall::resources_type& wall::
resources () const
{
  return this->resources_.get ();
}

wall::resources_type& wall::
resources ()
{
  return this->resources_.get ();
}

void wall::
resources (const resources_type& x)
{
  this->resources_.set (x);
}

void wall::
resources (::std::unique_ptr< resources_type > x)
{
  this->resources_.set (std::move (x));
}

const wall::collider_type& wall::
collider () const
{
  return this->collider_.get ();
}

wall::collider_type& wall::
collider ()
{
  return this->collider_.get ();
}

void wall::
collider (const collider_type& x)
{
  this->collider_.set (x);
}

void wall::
collider (::std::unique_ptr< collider_type > x)
{
  this->collider_.set (std::move (x));
}

const wall::events_type& wall::
events () const
{
  return this->events_.get ();
}

wall::events_type& wall::
events ()
{
  return this->events_.get ();
}

void wall::
events (const events_type& x)
{
  this->events_.set (x);
}

void wall::
events (::std::unique_ptr< events_type > x)
{
  this->events_.set (std::move (x));
}


// pricing
// 

const pricing::cost_type& pricing::
cost () const
{
  return this->cost_.get ();
}

pricing::cost_type& pricing::
cost ()
{
  return this->cost_.get ();
}

void pricing::
cost (const cost_type& x)
{
  this->cost_.set (x);
}

const pricing::upgrade_optional& pricing::
upgrade () const
{
  return this->upgrade_;
}

pricing::upgrade_optional& pricing::
upgrade ()
{
  return this->upgrade_;
}

void pricing::
upgrade (const upgrade_type& x)
{
  this->upgrade_.set (x);
}

void pricing::
upgrade (const upgrade_optional& x)
{
  this->upgrade_ = x;
}

void pricing::
upgrade (::std::unique_ptr< upgrade_type > x)
{
  this->upgrade_.set (std::move (x));
}


// powers
// 

const powers::restoresHP_optional& powers::
restoresHP () const
{
  return this->restoresHP_;
}

powers::restoresHP_optional& powers::
restoresHP ()
{
  return this->restoresHP_;
}

void powers::
restoresHP (const restoresHP_type& x)
{
  this->restoresHP_.set (x);
}

void powers::
restoresHP (const restoresHP_optional& x)
{
  this->restoresHP_ = x;
}

const powers::explosionImmune_optional& powers::
explosionImmune () const
{
  return this->explosionImmune_;
}

powers::explosionImmune_optional& powers::
explosionImmune ()
{
  return this->explosionImmune_;
}

void powers::
explosionImmune (const explosionImmune_type& x)
{
  this->explosionImmune_.set (x);
}

void powers::
explosionImmune (const explosionImmune_optional& x)
{
  this->explosionImmune_ = x;
}


// upgrade
// 

const upgrade::cost_type& upgrade::
cost () const
{
  return this->cost_.get ();
}

upgrade::cost_type& upgrade::
cost ()
{
  return this->cost_.get ();
}

void upgrade::
cost (const cost_type& x)
{
  this->cost_.set (x);
}

const upgrade::nextLevel_type& upgrade::
nextLevel () const
{
  return this->nextLevel_.get ();
}

upgrade::nextLevel_type& upgrade::
nextLevel ()
{
  return this->nextLevel_.get ();
}

void upgrade::
nextLevel (const nextLevel_type& x)
{
  this->nextLevel_.set (x);
}

void upgrade::
nextLevel (::std::unique_ptr< nextLevel_type > x)
{
  this->nextLevel_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// walls
//

walls::
walls (const className_type& className)
: ::xml_schema::type (),
  className_ (className, this),
  wall_ (this)
{
}

walls::
walls (const walls& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  className_ (x.className_, f, this),
  wall_ (x.wall_, f, this)
{
}

walls::
walls (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  className_ (this),
  wall_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void walls::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // className
    //
    if (n.name () == "className" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< className_type > r (
        className_traits::create (i, f, this));

      if (!className_.present ())
      {
        this->className_.set (::std::move (r));
        continue;
      }
    }

    // wall
    //
    if (n.name () == "wall" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< wall_type > r (
        wall_traits::create (i, f, this));

      this->wall_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  if (!className_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "className",
      "");
  }
}

walls* walls::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class walls (*this, f, c);
}

walls& walls::
operator= (const walls& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->className_ = x.className_;
    this->wall_ = x.wall_;
  }

  return *this;
}

walls::
~walls ()
{
}

// wall
//

wall::
wall (const name_type& name,
      const level_type& level,
      const baseHealth_type& baseHealth,
      const pricing_type& pricing,
      const resources_type& resources,
      const collider_type& collider,
      const events_type& events)
: ::xml_schema::type (),
  name_ (name, this),
  level_ (level, this),
  baseHealth_ (baseHealth, this),
  pricing_ (pricing, this),
  powers_ (this),
  resources_ (resources, this),
  collider_ (collider, this),
  events_ (events, this)
{
}

wall::
wall (const name_type& name,
      const level_type& level,
      const baseHealth_type& baseHealth,
      ::std::unique_ptr< pricing_type > pricing,
      ::std::unique_ptr< resources_type > resources,
      ::std::unique_ptr< collider_type > collider,
      ::std::unique_ptr< events_type > events)
: ::xml_schema::type (),
  name_ (name, this),
  level_ (level, this),
  baseHealth_ (baseHealth, this),
  pricing_ (std::move (pricing), this),
  powers_ (this),
  resources_ (std::move (resources), this),
  collider_ (std::move (collider), this),
  events_ (std::move (events), this)
{
}

wall::
wall (const wall& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  level_ (x.level_, f, this),
  baseHealth_ (x.baseHealth_, f, this),
  pricing_ (x.pricing_, f, this),
  powers_ (x.powers_, f, this),
  resources_ (x.resources_, f, this),
  collider_ (x.collider_, f, this),
  events_ (x.events_, f, this)
{
}

wall::
wall (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (this),
  level_ (this),
  baseHealth_ (this),
  pricing_ (this),
  powers_ (this),
  resources_ (this),
  collider_ (this),
  events_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void wall::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (::std::move (r));
        continue;
      }
    }

    // level
    //
    if (n.name () == "level" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< level_type > r (
        level_traits::create (i, f, this));

      if (!level_.present ())
      {
        this->level_.set (::std::move (r));
        continue;
      }
    }

    // baseHealth
    //
    if (n.name () == "baseHealth" && n.namespace_ ().empty ())
    {
      if (!baseHealth_.present ())
      {
        this->baseHealth_.set (baseHealth_traits::create (i, f, this));
        continue;
      }
    }

    // pricing
    //
    if (n.name () == "pricing" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< pricing_type > r (
        pricing_traits::create (i, f, this));

      if (!pricing_.present ())
      {
        this->pricing_.set (::std::move (r));
        continue;
      }
    }

    // powers
    //
    if (n.name () == "powers" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< powers_type > r (
        powers_traits::create (i, f, this));

      if (!this->powers_)
      {
        this->powers_.set (::std::move (r));
        continue;
      }
    }

    // resources
    //
    if (n.name () == "resources" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< resources_type > r (
        resources_traits::create (i, f, this));

      if (!resources_.present ())
      {
        this->resources_.set (::std::move (r));
        continue;
      }
    }

    // collider
    //
    if (n.name () == "collider" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< collider_type > r (
        collider_traits::create (i, f, this));

      if (!collider_.present ())
      {
        this->collider_.set (::std::move (r));
        continue;
      }
    }

    // events
    //
    if (n.name () == "events" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< events_type > r (
        events_traits::create (i, f, this));

      if (!events_.present ())
      {
        this->events_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!level_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "level",
      "");
  }

  if (!baseHealth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseHealth",
      "");
  }

  if (!pricing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pricing",
      "");
  }

  if (!resources_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "resources",
      "");
  }

  if (!collider_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "collider",
      "");
  }

  if (!events_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "events",
      "");
  }
}

wall* wall::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class wall (*this, f, c);
}

wall& wall::
operator= (const wall& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->name_ = x.name_;
    this->level_ = x.level_;
    this->baseHealth_ = x.baseHealth_;
    this->pricing_ = x.pricing_;
    this->powers_ = x.powers_;
    this->resources_ = x.resources_;
    this->collider_ = x.collider_;
    this->events_ = x.events_;
  }

  return *this;
}

wall::
~wall ()
{
}

// pricing
//

pricing::
pricing (const cost_type& cost)
: ::xml_schema::type (),
  cost_ (cost, this),
  upgrade_ (this)
{
}

pricing::
pricing (const pricing& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cost_ (x.cost_, f, this),
  upgrade_ (x.upgrade_, f, this)
{
}

pricing::
pricing (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cost_ (this),
  upgrade_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void pricing::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cost
    //
    if (n.name () == "cost" && n.namespace_ ().empty ())
    {
      if (!cost_.present ())
      {
        this->cost_.set (cost_traits::create (i, f, this));
        continue;
      }
    }

    // upgrade
    //
    if (n.name () == "upgrade" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< upgrade_type > r (
        upgrade_traits::create (i, f, this));

      if (!this->upgrade_)
      {
        this->upgrade_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!cost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cost",
      "");
  }
}

pricing* pricing::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pricing (*this, f, c);
}

pricing& pricing::
operator= (const pricing& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cost_ = x.cost_;
    this->upgrade_ = x.upgrade_;
  }

  return *this;
}

pricing::
~pricing ()
{
}

// powers
//

powers::
powers ()
: ::xml_schema::type (),
  restoresHP_ (this),
  explosionImmune_ (this)
{
}

powers::
powers (const powers& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  restoresHP_ (x.restoresHP_, f, this),
  explosionImmune_ (x.explosionImmune_, f, this)
{
}

powers::
powers (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  restoresHP_ (this),
  explosionImmune_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void powers::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // restoresHP
    //
    if (n.name () == "restoresHP" && n.namespace_ ().empty ())
    {
      if (!this->restoresHP_)
      {
        this->restoresHP_.set (restoresHP_traits::create (i, f, this));
        continue;
      }
    }

    // explosionImmune
    //
    if (n.name () == "explosionImmune" && n.namespace_ ().empty ())
    {
      if (!this->explosionImmune_)
      {
        this->explosionImmune_.set (explosionImmune_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

powers* powers::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class powers (*this, f, c);
}

powers& powers::
operator= (const powers& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->restoresHP_ = x.restoresHP_;
    this->explosionImmune_ = x.explosionImmune_;
  }

  return *this;
}

powers::
~powers ()
{
}

// upgrade
//

upgrade::
upgrade (const cost_type& cost,
         const nextLevel_type& nextLevel)
: ::xml_schema::type (),
  cost_ (cost, this),
  nextLevel_ (nextLevel, this)
{
}

upgrade::
upgrade (const upgrade& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cost_ (x.cost_, f, this),
  nextLevel_ (x.nextLevel_, f, this)
{
}

upgrade::
upgrade (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cost_ (this),
  nextLevel_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void upgrade::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cost
    //
    if (n.name () == "cost" && n.namespace_ ().empty ())
    {
      if (!cost_.present ())
      {
        this->cost_.set (cost_traits::create (i, f, this));
        continue;
      }
    }

    // nextLevel
    //
    if (n.name () == "nextLevel" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< nextLevel_type > r (
        nextLevel_traits::create (i, f, this));

      if (!nextLevel_.present ())
      {
        this->nextLevel_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!cost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cost",
      "");
  }

  if (!nextLevel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nextLevel",
      "");
  }
}

upgrade* upgrade::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class upgrade (*this, f, c);
}

upgrade& upgrade::
operator= (const upgrade& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cost_ = x.cost_;
    this->nextLevel_ = x.nextLevel_;
  }

  return *this;
}

upgrade::
~upgrade ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::walls >
walls_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::walls_ (isrc, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::walls_ (isrc, h, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::walls_ (isrc, h, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::walls_ (isrc, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::walls_ (isrc, h, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::walls_ (isrc, h, f, p);
}

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::walls > (
    ::walls_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::walls >
walls_ (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::walls > (
      ::walls_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "walls" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::walls > r (
      ::xsd::cxx::tree::traits< ::walls, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "walls",
    "");
}

::std::unique_ptr< ::walls >
walls_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "walls" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::walls > r (
      ::xsd::cxx::tree::traits< ::walls, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "walls",
    "");
}

::std::unique_ptr< ::wall >
wall_ (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::wall_ (isrc, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::wall_ (isrc, h, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::wall_ (isrc, h, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::wall_ (isrc, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::wall_ (isrc, h, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::wall_ (isrc, h, f, p);
}

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::wall > (
    ::wall_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::wall >
wall_ (const ::xercesc::DOMDocument& doc,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::wall > (
      ::wall_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "wall" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::wall > r (
      ::xsd::cxx::tree::traits< ::wall, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "wall",
    "");
}

::std::unique_ptr< ::wall >
wall_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "wall" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::wall > r (
      ::xsd::cxx::tree::traits< ::wall, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "wall",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

