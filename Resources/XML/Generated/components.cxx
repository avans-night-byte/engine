// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "components.hxx"

namespace Components
{
  // componentName
  // 


  // component
  // 

  const component::componentName_type& component::
  componentName () const
  {
    return this->componentName_.get ();
  }

  component::componentName_type& component::
  componentName ()
  {
    return this->componentName_.get ();
  }

  void component::
  componentName (const componentName_type& x)
  {
    this->componentName_.set (x);
  }

  void component::
  componentName (::std::unique_ptr< componentName_type > x)
  {
    this->componentName_.set (std::move (x));
  }

  const component::transformComponent_optional& component::
  transformComponent () const
  {
    return this->transformComponent_;
  }

  component::transformComponent_optional& component::
  transformComponent ()
  {
    return this->transformComponent_;
  }

  void component::
  transformComponent (const transformComponent_type& x)
  {
    this->transformComponent_.set (x);
  }

  void component::
  transformComponent (const transformComponent_optional& x)
  {
    this->transformComponent_ = x;
  }

  void component::
  transformComponent (::std::unique_ptr< transformComponent_type > x)
  {
    this->transformComponent_.set (std::move (x));
  }

  const component::AIComponent_optional& component::
  AIComponent () const
  {
    return this->AIComponent_;
  }

  component::AIComponent_optional& component::
  AIComponent ()
  {
    return this->AIComponent_;
  }

  void component::
  AIComponent (const AIComponent_type& x)
  {
    this->AIComponent_.set (x);
  }

  void component::
  AIComponent (const AIComponent_optional& x)
  {
    this->AIComponent_ = x;
  }

  void component::
  AIComponent (::std::unique_ptr< AIComponent_type > x)
  {
    this->AIComponent_.set (std::move (x));
  }

  const component::renderComponent_optional& component::
  renderComponent () const
  {
    return this->renderComponent_;
  }

  component::renderComponent_optional& component::
  renderComponent ()
  {
    return this->renderComponent_;
  }

  void component::
  renderComponent (const renderComponent_type& x)
  {
    this->renderComponent_.set (x);
  }

  void component::
  renderComponent (const renderComponent_optional& x)
  {
    this->renderComponent_ = x;
  }

  void component::
  renderComponent (::std::unique_ptr< renderComponent_type > x)
  {
    this->renderComponent_.set (std::move (x));
  }

  const component::physicsComponent_optional& component::
  physicsComponent () const
  {
    return this->physicsComponent_;
  }

  component::physicsComponent_optional& component::
  physicsComponent ()
  {
    return this->physicsComponent_;
  }

  void component::
  physicsComponent (const physicsComponent_type& x)
  {
    this->physicsComponent_.set (x);
  }

  void component::
  physicsComponent (const physicsComponent_optional& x)
  {
    this->physicsComponent_ = x;
  }

  void component::
  physicsComponent (::std::unique_ptr< physicsComponent_type > x)
  {
    this->physicsComponent_.set (std::move (x));
  }

  const component::characterComponent_optional& component::
  characterComponent () const
  {
    return this->characterComponent_;
  }

  component::characterComponent_optional& component::
  characterComponent ()
  {
    return this->characterComponent_;
  }

  void component::
  characterComponent (const characterComponent_type& x)
  {
    this->characterComponent_.set (x);
  }

  void component::
  characterComponent (const characterComponent_optional& x)
  {
    this->characterComponent_ = x;
  }

  void component::
  characterComponent (::std::unique_ptr< characterComponent_type > x)
  {
    this->characterComponent_.set (std::move (x));
  }

  const component::zombieComponent_optional& component::
  zombieComponent () const
  {
    return this->zombieComponent_;
  }

  component::zombieComponent_optional& component::
  zombieComponent ()
  {
    return this->zombieComponent_;
  }

  void component::
  zombieComponent (const zombieComponent_type& x)
  {
    this->zombieComponent_.set (x);
  }

  void component::
  zombieComponent (const zombieComponent_optional& x)
  {
    this->zombieComponent_ = x;
  }

  void component::
  zombieComponent (::std::unique_ptr< zombieComponent_type > x)
  {
    this->zombieComponent_.set (std::move (x));
  }

  const component::bulletComponent_optional& component::
  bulletComponent () const
  {
    return this->bulletComponent_;
  }

  component::bulletComponent_optional& component::
  bulletComponent ()
  {
    return this->bulletComponent_;
  }

  void component::
  bulletComponent (const bulletComponent_type& x)
  {
    this->bulletComponent_.set (x);
  }

  void component::
  bulletComponent (const bulletComponent_optional& x)
  {
    this->bulletComponent_ = x;
  }

  void component::
  bulletComponent (::std::unique_ptr< bulletComponent_type > x)
  {
    this->bulletComponent_.set (std::move (x));
  }

  const component::nextLevelComponent_optional& component::
  nextLevelComponent () const
  {
    return this->nextLevelComponent_;
  }

  component::nextLevelComponent_optional& component::
  nextLevelComponent ()
  {
    return this->nextLevelComponent_;
  }

  void component::
  nextLevelComponent (const nextLevelComponent_type& x)
  {
    this->nextLevelComponent_.set (x);
  }

  void component::
  nextLevelComponent (const nextLevelComponent_optional& x)
  {
    this->nextLevelComponent_ = x;
  }

  void component::
  nextLevelComponent (::std::unique_ptr< nextLevelComponent_type > x)
  {
    this->nextLevelComponent_.set (std::move (x));
  }

  const component::healthComponent_optional& component::
  healthComponent () const
  {
    return this->healthComponent_;
  }

  component::healthComponent_optional& component::
  healthComponent ()
  {
    return this->healthComponent_;
  }

  void component::
  healthComponent (const healthComponent_type& x)
  {
    this->healthComponent_.set (x);
  }

  void component::
  healthComponent (const healthComponent_optional& x)
  {
    this->healthComponent_ = x;
  }

  void component::
  healthComponent (::std::unique_ptr< healthComponent_type > x)
  {
    this->healthComponent_.set (std::move (x));
  }

  const component::weaponComponent_optional& component::
  weaponComponent () const
  {
    return this->weaponComponent_;
  }

  component::weaponComponent_optional& component::
  weaponComponent ()
  {
    return this->weaponComponent_;
  }

  void component::
  weaponComponent (const weaponComponent_type& x)
  {
    this->weaponComponent_.set (x);
  }

  void component::
  weaponComponent (const weaponComponent_optional& x)
  {
    this->weaponComponent_ = x;
  }

  void component::
  weaponComponent (::std::unique_ptr< weaponComponent_type > x)
  {
    this->weaponComponent_.set (std::move (x));
  }

  const component::inventoryComponent_optional& component::
  inventoryComponent () const
  {
    return this->inventoryComponent_;
  }

  component::inventoryComponent_optional& component::
  inventoryComponent ()
  {
    return this->inventoryComponent_;
  }

  void component::
  inventoryComponent (const inventoryComponent_type& x)
  {
    this->inventoryComponent_.set (x);
  }

  void component::
  inventoryComponent (const inventoryComponent_optional& x)
  {
    this->inventoryComponent_ = x;
  }

  void component::
  inventoryComponent (::std::unique_ptr< inventoryComponent_type > x)
  {
    this->inventoryComponent_.set (std::move (x));
  }

  const component::buildComponent_optional& component::
  buildComponent () const
  {
    return this->buildComponent_;
  }

  component::buildComponent_optional& component::
  buildComponent ()
  {
    return this->buildComponent_;
  }

  void component::
  buildComponent (const buildComponent_type& x)
  {
    this->buildComponent_.set (x);
  }

  void component::
  buildComponent (const buildComponent_optional& x)
  {
    this->buildComponent_ = x;
  }

  void component::
  buildComponent (::std::unique_ptr< buildComponent_type > x)
  {
    this->buildComponent_.set (std::move (x));
  }

  const component::walletComponent_optional& component::
  walletComponent () const
  {
    return this->walletComponent_;
  }

  component::walletComponent_optional& component::
  walletComponent ()
  {
    return this->walletComponent_;
  }

  void component::
  walletComponent (const walletComponent_type& x)
  {
    this->walletComponent_.set (x);
  }

  void component::
  walletComponent (const walletComponent_optional& x)
  {
    this->walletComponent_ = x;
  }

  void component::
  walletComponent (::std::unique_ptr< walletComponent_type > x)
  {
    this->walletComponent_.set (std::move (x));
  }

  const component::tradingComponent_optional& component::
  tradingComponent () const
  {
    return this->tradingComponent_;
  }

  component::tradingComponent_optional& component::
  tradingComponent ()
  {
    return this->tradingComponent_;
  }

  void component::
  tradingComponent (const tradingComponent_type& x)
  {
    this->tradingComponent_.set (x);
  }

  void component::
  tradingComponent (const tradingComponent_optional& x)
  {
    this->tradingComponent_ = x;
  }

  void component::
  tradingComponent (::std::unique_ptr< tradingComponent_type > x)
  {
    this->tradingComponent_.set (std::move (x));
  }

  const component::shopkeeperComponent_optional& component::
  shopkeeperComponent () const
  {
    return this->shopkeeperComponent_;
  }

  component::shopkeeperComponent_optional& component::
  shopkeeperComponent ()
  {
    return this->shopkeeperComponent_;
  }

  void component::
  shopkeeperComponent (const shopkeeperComponent_type& x)
  {
    this->shopkeeperComponent_.set (x);
  }

  void component::
  shopkeeperComponent (const shopkeeperComponent_optional& x)
  {
    this->shopkeeperComponent_ = x;
  }

  void component::
  shopkeeperComponent (::std::unique_ptr< shopkeeperComponent_type > x)
  {
    this->shopkeeperComponent_.set (std::move (x));
  }


  // floatCap
  // 


  // bodyType
  // 


  // bodyShape
  // 

  const bodyShape::circle_optional& bodyShape::
  circle () const
  {
    return this->circle_;
  }

  bodyShape::circle_optional& bodyShape::
  circle ()
  {
    return this->circle_;
  }

  void bodyShape::
  circle (const circle_type& x)
  {
    this->circle_.set (x);
  }

  void bodyShape::
  circle (const circle_optional& x)
  {
    this->circle_ = x;
  }

  void bodyShape::
  circle (::std::unique_ptr< circle_type > x)
  {
    this->circle_.set (std::move (x));
  }

  const bodyShape::box_optional& bodyShape::
  box () const
  {
    return this->box_;
  }

  bodyShape::box_optional& bodyShape::
  box ()
  {
    return this->box_;
  }

  void bodyShape::
  box (const box_type& x)
  {
    this->box_.set (x);
  }

  void bodyShape::
  box (const box_optional& x)
  {
    this->box_ = x;
  }

  void bodyShape::
  box (::std::unique_ptr< box_type > x)
  {
    this->box_.set (std::move (x));
  }


  // transformComponent
  // 

  const transformComponent::position_type& transformComponent::
  position () const
  {
    return this->position_.get ();
  }

  transformComponent::position_type& transformComponent::
  position ()
  {
    return this->position_.get ();
  }

  void transformComponent::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void transformComponent::
  position (::std::unique_ptr< position_type > x)
  {
    this->position_.set (std::move (x));
  }


  // AIComponent
  // 

  const AIComponent::followingName_type& AIComponent::
  followingName () const
  {
    return this->followingName_.get ();
  }

  AIComponent::followingName_type& AIComponent::
  followingName ()
  {
    return this->followingName_.get ();
  }

  void AIComponent::
  followingName (const followingName_type& x)
  {
    this->followingName_.set (x);
  }

  void AIComponent::
  followingName (::std::unique_ptr< followingName_type > x)
  {
    this->followingName_.set (std::move (x));
  }


  // renderComponent
  // 

  const renderComponent::spriteId_type& renderComponent::
  spriteId () const
  {
    return this->spriteId_.get ();
  }

  renderComponent::spriteId_type& renderComponent::
  spriteId ()
  {
    return this->spriteId_.get ();
  }

  void renderComponent::
  spriteId (const spriteId_type& x)
  {
    this->spriteId_.set (x);
  }

  void renderComponent::
  spriteId (::std::unique_ptr< spriteId_type > x)
  {
    this->spriteId_.set (std::move (x));
  }

  const renderComponent::spritePath_optional& renderComponent::
  spritePath () const
  {
    return this->spritePath_;
  }

  renderComponent::spritePath_optional& renderComponent::
  spritePath ()
  {
    return this->spritePath_;
  }

  void renderComponent::
  spritePath (const spritePath_type& x)
  {
    this->spritePath_.set (x);
  }

  void renderComponent::
  spritePath (const spritePath_optional& x)
  {
    this->spritePath_ = x;
  }

  void renderComponent::
  spritePath (::std::unique_ptr< spritePath_type > x)
  {
    this->spritePath_.set (std::move (x));
  }

  const renderComponent::size_type& renderComponent::
  size () const
  {
    return this->size_.get ();
  }

  renderComponent::size_type& renderComponent::
  size ()
  {
    return this->size_.get ();
  }

  void renderComponent::
  size (const size_type& x)
  {
    this->size_.set (x);
  }

  void renderComponent::
  size (::std::unique_ptr< size_type > x)
  {
    this->size_.set (std::move (x));
  }

  const renderComponent::offset_type& renderComponent::
  offset () const
  {
    return this->offset_.get ();
  }

  renderComponent::offset_type& renderComponent::
  offset ()
  {
    return this->offset_.get ();
  }

  void renderComponent::
  offset (const offset_type& x)
  {
    this->offset_.set (x);
  }

  void renderComponent::
  offset (::std::unique_ptr< offset_type > x)
  {
    this->offset_.set (std::move (x));
  }


  // physicsComponent
  // 

  const physicsComponent::position_type& physicsComponent::
  position () const
  {
    return this->position_.get ();
  }

  physicsComponent::position_type& physicsComponent::
  position ()
  {
    return this->position_.get ();
  }

  void physicsComponent::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void physicsComponent::
  position (::std::unique_ptr< position_type > x)
  {
    this->position_.set (std::move (x));
  }

  const physicsComponent::friction_type& physicsComponent::
  friction () const
  {
    return this->friction_.get ();
  }

  physicsComponent::friction_type& physicsComponent::
  friction ()
  {
    return this->friction_.get ();
  }

  void physicsComponent::
  friction (const friction_type& x)
  {
    this->friction_.set (x);
  }

  void physicsComponent::
  friction (::std::unique_ptr< friction_type > x)
  {
    this->friction_.set (std::move (x));
  }

  const physicsComponent::bodyType_type& physicsComponent::
  bodyType () const
  {
    return this->bodyType_.get ();
  }

  physicsComponent::bodyType_type& physicsComponent::
  bodyType ()
  {
    return this->bodyType_.get ();
  }

  void physicsComponent::
  bodyType (const bodyType_type& x)
  {
    this->bodyType_.set (x);
  }

  void physicsComponent::
  bodyType (::std::unique_ptr< bodyType_type > x)
  {
    this->bodyType_.set (std::move (x));
  }

  const physicsComponent::bodyShape_type& physicsComponent::
  bodyShape () const
  {
    return this->bodyShape_.get ();
  }

  physicsComponent::bodyShape_type& physicsComponent::
  bodyShape ()
  {
    return this->bodyShape_.get ();
  }

  void physicsComponent::
  bodyShape (const bodyShape_type& x)
  {
    this->bodyShape_.set (x);
  }

  void physicsComponent::
  bodyShape (::std::unique_ptr< bodyShape_type > x)
  {
    this->bodyShape_.set (std::move (x));
  }

  const physicsComponent::isBullet_optional& physicsComponent::
  isBullet () const
  {
    return this->isBullet_;
  }

  physicsComponent::isBullet_optional& physicsComponent::
  isBullet ()
  {
    return this->isBullet_;
  }

  void physicsComponent::
  isBullet (const isBullet_type& x)
  {
    this->isBullet_.set (x);
  }

  void physicsComponent::
  isBullet (const isBullet_optional& x)
  {
    this->isBullet_ = x;
  }

  physicsComponent::isBullet_type physicsComponent::
  isBullet_default_value ()
  {
    return isBullet_type (false);
  }

  const physicsComponent::isSensor_optional& physicsComponent::
  isSensor () const
  {
    return this->isSensor_;
  }

  physicsComponent::isSensor_optional& physicsComponent::
  isSensor ()
  {
    return this->isSensor_;
  }

  void physicsComponent::
  isSensor (const isSensor_type& x)
  {
    this->isSensor_.set (x);
  }

  void physicsComponent::
  isSensor (const isSensor_optional& x)
  {
    this->isSensor_ = x;
  }

  physicsComponent::isSensor_type physicsComponent::
  isSensor_default_value ()
  {
    return isSensor_type (false);
  }

  const physicsComponent::isEnabled_optional& physicsComponent::
  isEnabled () const
  {
    return this->isEnabled_;
  }

  physicsComponent::isEnabled_optional& physicsComponent::
  isEnabled ()
  {
    return this->isEnabled_;
  }

  void physicsComponent::
  isEnabled (const isEnabled_type& x)
  {
    this->isEnabled_.set (x);
  }

  void physicsComponent::
  isEnabled (const isEnabled_optional& x)
  {
    this->isEnabled_ = x;
  }

  physicsComponent::isEnabled_type physicsComponent::
  isEnabled_default_value ()
  {
    return isEnabled_type (true);
  }

  const physicsComponent::collisionHandler_sequence& physicsComponent::
  collisionHandler () const
  {
    return this->collisionHandler_;
  }

  physicsComponent::collisionHandler_sequence& physicsComponent::
  collisionHandler ()
  {
    return this->collisionHandler_;
  }

  void physicsComponent::
  collisionHandler (const collisionHandler_sequence& s)
  {
    this->collisionHandler_ = s;
  }


  // characterComponent
  // 


  // zombieComponent
  // 


  // bulletComponent
  // 


  // nextLevelComponent
  // 

  const nextLevelComponent::levelName_type& nextLevelComponent::
  levelName () const
  {
    return this->levelName_.get ();
  }

  nextLevelComponent::levelName_type& nextLevelComponent::
  levelName ()
  {
    return this->levelName_.get ();
  }

  void nextLevelComponent::
  levelName (const levelName_type& x)
  {
    this->levelName_.set (x);
  }

  void nextLevelComponent::
  levelName (::std::unique_ptr< levelName_type > x)
  {
    this->levelName_.set (std::move (x));
  }


  // healthComponent
  // 


  // weaponComponent
  // 


  // inventoryComponent
  // 


  // buildComponent
  // 


  // walletComponent
  // 


  // tradingComponent
  // 


  // shopkeeperComponent
  // 


  // circle
  // 

  const circle::position_type& circle::
  position () const
  {
    return this->position_.get ();
  }

  circle::position_type& circle::
  position ()
  {
    return this->position_.get ();
  }

  void circle::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void circle::
  position (::std::unique_ptr< position_type > x)
  {
    this->position_.set (std::move (x));
  }

  const circle::radius_type& circle::
  radius () const
  {
    return this->radius_.get ();
  }

  circle::radius_type& circle::
  radius ()
  {
    return this->radius_.get ();
  }

  void circle::
  radius (const radius_type& x)
  {
    this->radius_.set (x);
  }


  // box
  // 

  const box::width_type& box::
  width () const
  {
    return this->width_.get ();
  }

  box::width_type& box::
  width ()
  {
    return this->width_.get ();
  }

  void box::
  width (const width_type& x)
  {
    this->width_.set (x);
  }

  const box::height_type& box::
  height () const
  {
    return this->height_.get ();
  }

  box::height_type& box::
  height ()
  {
    return this->height_.get ();
  }

  void box::
  height (const height_type& x)
  {
    this->height_.set (x);
  }

  const box::offsetX_optional& box::
  offsetX () const
  {
    return this->offsetX_;
  }

  box::offsetX_optional& box::
  offsetX ()
  {
    return this->offsetX_;
  }

  void box::
  offsetX (const offsetX_type& x)
  {
    this->offsetX_.set (x);
  }

  void box::
  offsetX (const offsetX_optional& x)
  {
    this->offsetX_ = x;
  }

  const box::offsetY_optional& box::
  offsetY () const
  {
    return this->offsetY_;
  }

  box::offsetY_optional& box::
  offsetY ()
  {
    return this->offsetY_;
  }

  void box::
  offsetY (const offsetY_type& x)
  {
    this->offsetY_.set (x);
  }

  void box::
  offsetY (const offsetY_optional& x)
  {
    this->offsetY_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Components
{
  // componentName
  //

  componentName::
  componentName ()
  : ::xml_schema::string ()
  {
  }

  componentName::
  componentName (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const componentName& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  componentName::
  componentName (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  componentName::
  componentName (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  componentName::
  componentName (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  componentName* componentName::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class componentName (*this, f, c);
  }

  componentName::
  ~componentName ()
  {
  }

  // component
  //

  component::
  component (const componentName_type& componentName)
  : ::xml_schema::type (),
    componentName_ (componentName, this),
    transformComponent_ (this),
    AIComponent_ (this),
    renderComponent_ (this),
    physicsComponent_ (this),
    characterComponent_ (this),
    zombieComponent_ (this),
    bulletComponent_ (this),
    nextLevelComponent_ (this),
    healthComponent_ (this),
    weaponComponent_ (this),
    inventoryComponent_ (this),
    buildComponent_ (this),
    walletComponent_ (this),
    tradingComponent_ (this),
    shopkeeperComponent_ (this)
  {
  }

  component::
  component (const component& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    componentName_ (x.componentName_, f, this),
    transformComponent_ (x.transformComponent_, f, this),
    AIComponent_ (x.AIComponent_, f, this),
    renderComponent_ (x.renderComponent_, f, this),
    physicsComponent_ (x.physicsComponent_, f, this),
    characterComponent_ (x.characterComponent_, f, this),
    zombieComponent_ (x.zombieComponent_, f, this),
    bulletComponent_ (x.bulletComponent_, f, this),
    nextLevelComponent_ (x.nextLevelComponent_, f, this),
    healthComponent_ (x.healthComponent_, f, this),
    weaponComponent_ (x.weaponComponent_, f, this),
    inventoryComponent_ (x.inventoryComponent_, f, this),
    buildComponent_ (x.buildComponent_, f, this),
    walletComponent_ (x.walletComponent_, f, this),
    tradingComponent_ (x.tradingComponent_, f, this),
    shopkeeperComponent_ (x.shopkeeperComponent_, f, this)
  {
  }

  component::
  component (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    componentName_ (this),
    transformComponent_ (this),
    AIComponent_ (this),
    renderComponent_ (this),
    physicsComponent_ (this),
    characterComponent_ (this),
    zombieComponent_ (this),
    bulletComponent_ (this),
    nextLevelComponent_ (this),
    healthComponent_ (this),
    weaponComponent_ (this),
    inventoryComponent_ (this),
    buildComponent_ (this),
    walletComponent_ (this),
    tradingComponent_ (this),
    shopkeeperComponent_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void component::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // componentName
      //
      if (n.name () == "componentName" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< componentName_type > r (
          componentName_traits::create (i, f, this));

        if (!componentName_.present ())
        {
          this->componentName_.set (::std::move (r));
          continue;
        }
      }

      // transformComponent
      //
      if (n.name () == "transformComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< transformComponent_type > r (
          transformComponent_traits::create (i, f, this));

        if (!this->transformComponent_)
        {
          this->transformComponent_.set (::std::move (r));
          continue;
        }
      }

      // AIComponent
      //
      if (n.name () == "AIComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< AIComponent_type > r (
          AIComponent_traits::create (i, f, this));

        if (!this->AIComponent_)
        {
          this->AIComponent_.set (::std::move (r));
          continue;
        }
      }

      // renderComponent
      //
      if (n.name () == "renderComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< renderComponent_type > r (
          renderComponent_traits::create (i, f, this));

        if (!this->renderComponent_)
        {
          this->renderComponent_.set (::std::move (r));
          continue;
        }
      }

      // physicsComponent
      //
      if (n.name () == "physicsComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< physicsComponent_type > r (
          physicsComponent_traits::create (i, f, this));

        if (!this->physicsComponent_)
        {
          this->physicsComponent_.set (::std::move (r));
          continue;
        }
      }

      // characterComponent
      //
      if (n.name () == "characterComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< characterComponent_type > r (
          characterComponent_traits::create (i, f, this));

        if (!this->characterComponent_)
        {
          this->characterComponent_.set (::std::move (r));
          continue;
        }
      }

      // zombieComponent
      //
      if (n.name () == "zombieComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< zombieComponent_type > r (
          zombieComponent_traits::create (i, f, this));

        if (!this->zombieComponent_)
        {
          this->zombieComponent_.set (::std::move (r));
          continue;
        }
      }

      // bulletComponent
      //
      if (n.name () == "bulletComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< bulletComponent_type > r (
          bulletComponent_traits::create (i, f, this));

        if (!this->bulletComponent_)
        {
          this->bulletComponent_.set (::std::move (r));
          continue;
        }
      }

      // nextLevelComponent
      //
      if (n.name () == "nextLevelComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< nextLevelComponent_type > r (
          nextLevelComponent_traits::create (i, f, this));

        if (!this->nextLevelComponent_)
        {
          this->nextLevelComponent_.set (::std::move (r));
          continue;
        }
      }

      // healthComponent
      //
      if (n.name () == "healthComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< healthComponent_type > r (
          healthComponent_traits::create (i, f, this));

        if (!this->healthComponent_)
        {
          this->healthComponent_.set (::std::move (r));
          continue;
        }
      }

      // weaponComponent
      //
      if (n.name () == "weaponComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< weaponComponent_type > r (
          weaponComponent_traits::create (i, f, this));

        if (!this->weaponComponent_)
        {
          this->weaponComponent_.set (::std::move (r));
          continue;
        }
      }

      // inventoryComponent
      //
      if (n.name () == "inventoryComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< inventoryComponent_type > r (
          inventoryComponent_traits::create (i, f, this));

        if (!this->inventoryComponent_)
        {
          this->inventoryComponent_.set (::std::move (r));
          continue;
        }
      }

      // buildComponent
      //
      if (n.name () == "buildComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< buildComponent_type > r (
          buildComponent_traits::create (i, f, this));

        if (!this->buildComponent_)
        {
          this->buildComponent_.set (::std::move (r));
          continue;
        }
      }

      // walletComponent
      //
      if (n.name () == "walletComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< walletComponent_type > r (
          walletComponent_traits::create (i, f, this));

        if (!this->walletComponent_)
        {
          this->walletComponent_.set (::std::move (r));
          continue;
        }
      }

      // tradingComponent
      //
      if (n.name () == "tradingComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< tradingComponent_type > r (
          tradingComponent_traits::create (i, f, this));

        if (!this->tradingComponent_)
        {
          this->tradingComponent_.set (::std::move (r));
          continue;
        }
      }

      // shopkeeperComponent
      //
      if (n.name () == "shopkeeperComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< shopkeeperComponent_type > r (
          shopkeeperComponent_traits::create (i, f, this));

        if (!this->shopkeeperComponent_)
        {
          this->shopkeeperComponent_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!componentName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "componentName",
        "");
    }
  }

  component* component::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class component (*this, f, c);
  }

  component& component::
  operator= (const component& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->componentName_ = x.componentName_;
      this->transformComponent_ = x.transformComponent_;
      this->AIComponent_ = x.AIComponent_;
      this->renderComponent_ = x.renderComponent_;
      this->physicsComponent_ = x.physicsComponent_;
      this->characterComponent_ = x.characterComponent_;
      this->zombieComponent_ = x.zombieComponent_;
      this->bulletComponent_ = x.bulletComponent_;
      this->nextLevelComponent_ = x.nextLevelComponent_;
      this->healthComponent_ = x.healthComponent_;
      this->weaponComponent_ = x.weaponComponent_;
      this->inventoryComponent_ = x.inventoryComponent_;
      this->buildComponent_ = x.buildComponent_;
      this->walletComponent_ = x.walletComponent_;
      this->tradingComponent_ = x.tradingComponent_;
      this->shopkeeperComponent_ = x.shopkeeperComponent_;
    }

    return *this;
  }

  component::
  ~component ()
  {
  }

  // floatCap
  //

  floatCap::
  floatCap (const ::xml_schema::float_& _xsd_float__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (_xsd_float__base)
  {
  }

  floatCap::
  floatCap (const floatCap& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  floatCap::
  floatCap (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  floatCap* floatCap::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class floatCap (*this, f, c);
  }

  floatCap::
  ~floatCap ()
  {
  }

  // bodyType
  //

  bodyType::
  bodyType ()
  : ::xml_schema::string ()
  {
  }

  bodyType::
  bodyType (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const bodyType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  bodyType::
  bodyType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  bodyType::
  bodyType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  bodyType::
  bodyType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  bodyType* bodyType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bodyType (*this, f, c);
  }

  bodyType::
  ~bodyType ()
  {
  }

  // bodyShape
  //

  bodyShape::
  bodyShape ()
  : ::xml_schema::type (),
    circle_ (this),
    box_ (this)
  {
  }

  bodyShape::
  bodyShape (const bodyShape& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    circle_ (x.circle_, f, this),
    box_ (x.box_, f, this)
  {
  }

  bodyShape::
  bodyShape (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    circle_ (this),
    box_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void bodyShape::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // circle
      //
      if (n.name () == "circle" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< circle_type > r (
          circle_traits::create (i, f, this));

        if (!this->circle_)
        {
          this->circle_.set (::std::move (r));
          continue;
        }
      }

      // box
      //
      if (n.name () == "box" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< box_type > r (
          box_traits::create (i, f, this));

        if (!this->box_)
        {
          this->box_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  bodyShape* bodyShape::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bodyShape (*this, f, c);
  }

  bodyShape& bodyShape::
  operator= (const bodyShape& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->circle_ = x.circle_;
      this->box_ = x.box_;
    }

    return *this;
  }

  bodyShape::
  ~bodyShape ()
  {
  }

  // transformComponent
  //

  transformComponent::
  transformComponent (const position_type& position)
  : ::xml_schema::type (),
    position_ (position, this)
  {
  }

  transformComponent::
  transformComponent (::std::unique_ptr< position_type > position)
  : ::xml_schema::type (),
    position_ (std::move (position), this)
  {
  }

  transformComponent::
  transformComponent (const transformComponent& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this)
  {
  }

  transformComponent::
  transformComponent (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void transformComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "Common");
    }
  }

  transformComponent* transformComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class transformComponent (*this, f, c);
  }

  transformComponent& transformComponent::
  operator= (const transformComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->position_ = x.position_;
    }

    return *this;
  }

  transformComponent::
  ~transformComponent ()
  {
  }

  // AIComponent
  //

  AIComponent::
  AIComponent (const followingName_type& followingName)
  : ::xml_schema::type (),
    followingName_ (followingName, this)
  {
  }

  AIComponent::
  AIComponent (const AIComponent& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    followingName_ (x.followingName_, f, this)
  {
  }

  AIComponent::
  AIComponent (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    followingName_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void AIComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // followingName
      //
      if (n.name () == "followingName" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< followingName_type > r (
          followingName_traits::create (i, f, this));

        if (!followingName_.present ())
        {
          this->followingName_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!followingName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "followingName",
        "");
    }
  }

  AIComponent* AIComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class AIComponent (*this, f, c);
  }

  AIComponent& AIComponent::
  operator= (const AIComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->followingName_ = x.followingName_;
    }

    return *this;
  }

  AIComponent::
  ~AIComponent ()
  {
  }

  // renderComponent
  //

  renderComponent::
  renderComponent (const spriteId_type& spriteId,
                   const size_type& size,
                   const offset_type& offset)
  : ::xml_schema::type (),
    spriteId_ (spriteId, this),
    spritePath_ (this),
    size_ (size, this),
    offset_ (offset, this)
  {
  }

  renderComponent::
  renderComponent (const spriteId_type& spriteId,
                   ::std::unique_ptr< size_type > size,
                   ::std::unique_ptr< offset_type > offset)
  : ::xml_schema::type (),
    spriteId_ (spriteId, this),
    spritePath_ (this),
    size_ (std::move (size), this),
    offset_ (std::move (offset), this)
  {
  }

  renderComponent::
  renderComponent (const renderComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    spriteId_ (x.spriteId_, f, this),
    spritePath_ (x.spritePath_, f, this),
    size_ (x.size_, f, this),
    offset_ (x.offset_, f, this)
  {
  }

  renderComponent::
  renderComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    spriteId_ (this),
    spritePath_ (this),
    size_ (this),
    offset_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void renderComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // spriteId
      //
      if (n.name () == "spriteId" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< spriteId_type > r (
          spriteId_traits::create (i, f, this));

        if (!spriteId_.present ())
        {
          this->spriteId_.set (::std::move (r));
          continue;
        }
      }

      // spritePath
      //
      if (n.name () == "spritePath" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< spritePath_type > r (
          spritePath_traits::create (i, f, this));

        if (!this->spritePath_)
        {
          this->spritePath_.set (::std::move (r));
          continue;
        }
      }

      // size
      //
      if (n.name () == "size" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< size_type > r (
          size_traits::create (i, f, this));

        if (!size_.present ())
        {
          this->size_.set (::std::move (r));
          continue;
        }
      }

      // offset
      //
      if (n.name () == "offset" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< offset_type > r (
          offset_traits::create (i, f, this));

        if (!offset_.present ())
        {
          this->offset_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!spriteId_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "spriteId",
        "");
    }

    if (!size_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "size",
        "");
    }

    if (!offset_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "offset",
        "");
    }
  }

  renderComponent* renderComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class renderComponent (*this, f, c);
  }

  renderComponent& renderComponent::
  operator= (const renderComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->spriteId_ = x.spriteId_;
      this->spritePath_ = x.spritePath_;
      this->size_ = x.size_;
      this->offset_ = x.offset_;
    }

    return *this;
  }

  renderComponent::
  ~renderComponent ()
  {
  }

  // physicsComponent
  //

  physicsComponent::
  physicsComponent (const position_type& position,
                    const friction_type& friction,
                    const bodyType_type& bodyType,
                    const bodyShape_type& bodyShape)
  : ::xml_schema::type (),
    position_ (position, this),
    friction_ (friction, this),
    bodyType_ (bodyType, this),
    bodyShape_ (bodyShape, this),
    isBullet_ (this),
    isSensor_ (this),
    isEnabled_ (this),
    collisionHandler_ (this)
  {
  }

  physicsComponent::
  physicsComponent (::std::unique_ptr< position_type > position,
                    const friction_type& friction,
                    const bodyType_type& bodyType,
                    ::std::unique_ptr< bodyShape_type > bodyShape)
  : ::xml_schema::type (),
    position_ (std::move (position), this),
    friction_ (friction, this),
    bodyType_ (bodyType, this),
    bodyShape_ (std::move (bodyShape), this),
    isBullet_ (this),
    isSensor_ (this),
    isEnabled_ (this),
    collisionHandler_ (this)
  {
  }

  physicsComponent::
  physicsComponent (const physicsComponent& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this),
    friction_ (x.friction_, f, this),
    bodyType_ (x.bodyType_, f, this),
    bodyShape_ (x.bodyShape_, f, this),
    isBullet_ (x.isBullet_, f, this),
    isSensor_ (x.isSensor_, f, this),
    isEnabled_ (x.isEnabled_, f, this),
    collisionHandler_ (x.collisionHandler_, f, this)
  {
  }

  physicsComponent::
  physicsComponent (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (this),
    friction_ (this),
    bodyType_ (this),
    bodyShape_ (this),
    isBullet_ (this),
    isSensor_ (this),
    isEnabled_ (this),
    collisionHandler_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void physicsComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (::std::move (r));
          continue;
        }
      }

      // friction
      //
      if (n.name () == "friction" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< friction_type > r (
          friction_traits::create (i, f, this));

        if (!friction_.present ())
        {
          this->friction_.set (::std::move (r));
          continue;
        }
      }

      // bodyType
      //
      if (n.name () == "bodyType" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< bodyType_type > r (
          bodyType_traits::create (i, f, this));

        if (!bodyType_.present ())
        {
          this->bodyType_.set (::std::move (r));
          continue;
        }
      }

      // bodyShape
      //
      if (n.name () == "bodyShape" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< bodyShape_type > r (
          bodyShape_traits::create (i, f, this));

        if (!bodyShape_.present ())
        {
          this->bodyShape_.set (::std::move (r));
          continue;
        }
      }

      // isBullet
      //
      if (n.name () == "isBullet" && n.namespace_ ().empty ())
      {
        if (!this->isBullet_)
        {
          this->isBullet_.set (isBullet_traits::create (i, f, this));
          continue;
        }
      }

      // isSensor
      //
      if (n.name () == "isSensor" && n.namespace_ ().empty ())
      {
        if (!this->isSensor_)
        {
          this->isSensor_.set (isSensor_traits::create (i, f, this));
          continue;
        }
      }

      // isEnabled
      //
      if (n.name () == "isEnabled" && n.namespace_ ().empty ())
      {
        if (!this->isEnabled_)
        {
          this->isEnabled_.set (isEnabled_traits::create (i, f, this));
          continue;
        }
      }

      // collisionHandler
      //
      if (n.name () == "collisionHandler" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< collisionHandler_type > r (
          collisionHandler_traits::create (i, f, this));

        this->collisionHandler_.push_back (::std::move (r));
        continue;
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "Common");
    }

    if (!friction_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "friction",
        "");
    }

    if (!bodyType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bodyType",
        "");
    }

    if (!bodyShape_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bodyShape",
        "");
    }
  }

  physicsComponent* physicsComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class physicsComponent (*this, f, c);
  }

  physicsComponent& physicsComponent::
  operator= (const physicsComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->position_ = x.position_;
      this->friction_ = x.friction_;
      this->bodyType_ = x.bodyType_;
      this->bodyShape_ = x.bodyShape_;
      this->isBullet_ = x.isBullet_;
      this->isSensor_ = x.isSensor_;
      this->isEnabled_ = x.isEnabled_;
      this->collisionHandler_ = x.collisionHandler_;
    }

    return *this;
  }

  physicsComponent::
  ~physicsComponent ()
  {
  }

  // characterComponent
  //

  characterComponent::
  characterComponent ()
  : ::xml_schema::type ()
  {
  }

  characterComponent::
  characterComponent (const characterComponent& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  characterComponent* characterComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class characterComponent (*this, f, c);
  }

  characterComponent::
  ~characterComponent ()
  {
  }

  // zombieComponent
  //

  zombieComponent::
  zombieComponent ()
  : ::xml_schema::type ()
  {
  }

  zombieComponent::
  zombieComponent (const zombieComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  zombieComponent::
  zombieComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  zombieComponent::
  zombieComponent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  zombieComponent::
  zombieComponent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  zombieComponent* zombieComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class zombieComponent (*this, f, c);
  }

  zombieComponent::
  ~zombieComponent ()
  {
  }

  // bulletComponent
  //

  bulletComponent::
  bulletComponent ()
  : ::xml_schema::type ()
  {
  }

  bulletComponent::
  bulletComponent (const bulletComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  bulletComponent::
  bulletComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  bulletComponent::
  bulletComponent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  bulletComponent::
  bulletComponent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  bulletComponent* bulletComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bulletComponent (*this, f, c);
  }

  bulletComponent::
  ~bulletComponent ()
  {
  }

  // nextLevelComponent
  //

  nextLevelComponent::
  nextLevelComponent (const levelName_type& levelName)
  : ::xml_schema::type (),
    levelName_ (levelName, this)
  {
  }

  nextLevelComponent::
  nextLevelComponent (const nextLevelComponent& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    levelName_ (x.levelName_, f, this)
  {
  }

  nextLevelComponent::
  nextLevelComponent (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    levelName_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void nextLevelComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // levelName
      //
      if (n.name () == "levelName" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< levelName_type > r (
          levelName_traits::create (i, f, this));

        if (!levelName_.present ())
        {
          this->levelName_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!levelName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "levelName",
        "");
    }
  }

  nextLevelComponent* nextLevelComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class nextLevelComponent (*this, f, c);
  }

  nextLevelComponent& nextLevelComponent::
  operator= (const nextLevelComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->levelName_ = x.levelName_;
    }

    return *this;
  }

  nextLevelComponent::
  ~nextLevelComponent ()
  {
  }

  // healthComponent
  //

  healthComponent::
  healthComponent ()
  : ::xml_schema::type ()
  {
  }

  healthComponent::
  healthComponent (const healthComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  healthComponent::
  healthComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  healthComponent::
  healthComponent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  healthComponent::
  healthComponent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  healthComponent* healthComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class healthComponent (*this, f, c);
  }

  healthComponent::
  ~healthComponent ()
  {
  }

  // weaponComponent
  //

  weaponComponent::
  weaponComponent ()
  : ::xml_schema::type ()
  {
  }

  weaponComponent::
  weaponComponent (const weaponComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  weaponComponent::
  weaponComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  weaponComponent::
  weaponComponent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  weaponComponent::
  weaponComponent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  weaponComponent* weaponComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class weaponComponent (*this, f, c);
  }

  weaponComponent::
  ~weaponComponent ()
  {
  }

  // inventoryComponent
  //

  inventoryComponent::
  inventoryComponent ()
  : ::xml_schema::type ()
  {
  }

  inventoryComponent::
  inventoryComponent (const inventoryComponent& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  inventoryComponent::
  inventoryComponent (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  inventoryComponent::
  inventoryComponent (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  inventoryComponent::
  inventoryComponent (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  inventoryComponent* inventoryComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class inventoryComponent (*this, f, c);
  }

  inventoryComponent::
  ~inventoryComponent ()
  {
  }

  // buildComponent
  //

  buildComponent::
  buildComponent ()
  : ::xml_schema::type ()
  {
  }

  buildComponent::
  buildComponent (const buildComponent& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  buildComponent::
  buildComponent (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  buildComponent::
  buildComponent (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  buildComponent::
  buildComponent (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  buildComponent* buildComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class buildComponent (*this, f, c);
  }

  buildComponent::
  ~buildComponent ()
  {
  }

  // walletComponent
  //

  walletComponent::
  walletComponent ()
  : ::xml_schema::type ()
  {
  }

  walletComponent::
  walletComponent (const walletComponent& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  walletComponent::
  walletComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  walletComponent::
  walletComponent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  walletComponent::
  walletComponent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  walletComponent* walletComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class walletComponent (*this, f, c);
  }

  walletComponent::
  ~walletComponent ()
  {
  }

  // tradingComponent
  //

  tradingComponent::
  tradingComponent ()
  : ::xml_schema::type ()
  {
  }

  tradingComponent::
  tradingComponent (const tradingComponent& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  tradingComponent::
  tradingComponent (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  tradingComponent::
  tradingComponent (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  tradingComponent::
  tradingComponent (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  tradingComponent* tradingComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tradingComponent (*this, f, c);
  }

  tradingComponent::
  ~tradingComponent ()
  {
  }

  // shopkeeperComponent
  //

  shopkeeperComponent::
  shopkeeperComponent ()
  : ::xml_schema::type ()
  {
  }

  shopkeeperComponent::
  shopkeeperComponent (const shopkeeperComponent& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  shopkeeperComponent::
  shopkeeperComponent (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  shopkeeperComponent::
  shopkeeperComponent (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  shopkeeperComponent::
  shopkeeperComponent (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  shopkeeperComponent* shopkeeperComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class shopkeeperComponent (*this, f, c);
  }

  shopkeeperComponent::
  ~shopkeeperComponent ()
  {
  }

  // circle
  //

  circle::
  circle (const position_type& position,
          const radius_type& radius)
  : ::xml_schema::type (),
    position_ (position, this),
    radius_ (radius, this)
  {
  }

  circle::
  circle (::std::unique_ptr< position_type > position,
          const radius_type& radius)
  : ::xml_schema::type (),
    position_ (std::move (position), this),
    radius_ (radius, this)
  {
  }

  circle::
  circle (const circle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this),
    radius_ (x.radius_, f, this)
  {
  }

  circle::
  circle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (this),
    radius_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void circle::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (::std::move (r));
          continue;
        }
      }

      // radius
      //
      if (n.name () == "radius" && n.namespace_ ().empty ())
      {
        if (!radius_.present ())
        {
          this->radius_.set (radius_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "Common");
    }

    if (!radius_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "radius",
        "");
    }
  }

  circle* circle::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class circle (*this, f, c);
  }

  circle& circle::
  operator= (const circle& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->position_ = x.position_;
      this->radius_ = x.radius_;
    }

    return *this;
  }

  circle::
  ~circle ()
  {
  }

  // box
  //

  box::
  box (const width_type& width,
       const height_type& height)
  : ::xml_schema::type (),
    width_ (width, this),
    height_ (height, this),
    offsetX_ (this),
    offsetY_ (this)
  {
  }

  box::
  box (const box& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    width_ (x.width_, f, this),
    height_ (x.height_, f, this),
    offsetX_ (x.offsetX_, f, this),
    offsetY_ (x.offsetY_, f, this)
  {
  }

  box::
  box (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    width_ (this),
    height_ (this),
    offsetX_ (this),
    offsetY_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void box::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // width
      //
      if (n.name () == "width" && n.namespace_ ().empty ())
      {
        if (!width_.present ())
        {
          this->width_.set (width_traits::create (i, f, this));
          continue;
        }
      }

      // height
      //
      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        if (!height_.present ())
        {
          this->height_.set (height_traits::create (i, f, this));
          continue;
        }
      }

      // offsetX
      //
      if (n.name () == "offsetX" && n.namespace_ ().empty ())
      {
        if (!this->offsetX_)
        {
          this->offsetX_.set (offsetX_traits::create (i, f, this));
          continue;
        }
      }

      // offsetY
      //
      if (n.name () == "offsetY" && n.namespace_ ().empty ())
      {
        if (!this->offsetY_)
        {
          this->offsetY_.set (offsetY_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!width_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "width",
        "");
    }

    if (!height_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "height",
        "");
    }
  }

  box* box::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class box (*this, f, c);
  }

  box& box::
  operator= (const box& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->width_ = x.width_;
      this->height_ = x.height_;
      this->offsetX_ = x.offsetX_;
      this->offsetY_ = x.offsetY_;
    }

    return *this;
  }

  box::
  ~box ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Components
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

