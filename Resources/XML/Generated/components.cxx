// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "components.hxx"

namespace Components
{
  // componentName
  // 


  // component
  // 

  const component::componentName_type& component::
  componentName () const
  {
    return this->componentName_.get ();
  }

  component::componentName_type& component::
  componentName ()
  {
    return this->componentName_.get ();
  }

  void component::
  componentName (const componentName_type& x)
  {
    this->componentName_.set (x);
  }

  void component::
  componentName (::std::unique_ptr< componentName_type > x)
  {
    this->componentName_.set (std::move (x));
  }

  const component::worldPositionComponent_optional& component::
  worldPositionComponent () const
  {
    return this->worldPositionComponent_;
  }

  component::worldPositionComponent_optional& component::
  worldPositionComponent ()
  {
    return this->worldPositionComponent_;
  }

  void component::
  worldPositionComponent (const worldPositionComponent_type& x)
  {
    this->worldPositionComponent_.set (x);
  }

  void component::
  worldPositionComponent (const worldPositionComponent_optional& x)
  {
    this->worldPositionComponent_ = x;
  }

  void component::
  worldPositionComponent (::std::unique_ptr< worldPositionComponent_type > x)
  {
    this->worldPositionComponent_.set (std::move (x));
  }

  const component::physicsComponent_optional& component::
  physicsComponent () const
  {
    return this->physicsComponent_;
  }

  component::physicsComponent_optional& component::
  physicsComponent ()
  {
    return this->physicsComponent_;
  }

  void component::
  physicsComponent (const physicsComponent_type& x)
  {
    this->physicsComponent_.set (x);
  }

  void component::
  physicsComponent (const physicsComponent_optional& x)
  {
    this->physicsComponent_ = x;
  }

  void component::
  physicsComponent (::std::unique_ptr< physicsComponent_type > x)
  {
    this->physicsComponent_.set (std::move (x));
  }

  const component::characterComponent_optional& component::
  characterComponent () const
  {
    return this->characterComponent_;
  }

  component::characterComponent_optional& component::
  characterComponent ()
  {
    return this->characterComponent_;
  }

  void component::
  characterComponent (const characterComponent_type& x)
  {
    this->characterComponent_.set (x);
  }

  void component::
  characterComponent (const characterComponent_optional& x)
  {
    this->characterComponent_ = x;
  }

  void component::
  characterComponent (::std::unique_ptr< characterComponent_type > x)
  {
    this->characterComponent_.set (std::move (x));
  }

  const component::explosionCrate_optional& component::
  explosionCrate () const
  {
    return this->explosionCrate_;
  }

  component::explosionCrate_optional& component::
  explosionCrate ()
  {
    return this->explosionCrate_;
  }

  void component::
  explosionCrate (const explosionCrate_type& x)
  {
    this->explosionCrate_.set (x);
  }

  void component::
  explosionCrate (const explosionCrate_optional& x)
  {
    this->explosionCrate_ = x;
  }

  void component::
  explosionCrate (::std::unique_ptr< explosionCrate_type > x)
  {
    this->explosionCrate_.set (std::move (x));
  }


  // floatCap
  // 


  // bodyType
  // 


  // bodyShape
  // 

  const bodyShape::circle_optional& bodyShape::
  circle () const
  {
    return this->circle_;
  }

  bodyShape::circle_optional& bodyShape::
  circle ()
  {
    return this->circle_;
  }

  void bodyShape::
  circle (const circle_type& x)
  {
    this->circle_.set (x);
  }

  void bodyShape::
  circle (const circle_optional& x)
  {
    this->circle_ = x;
  }

  void bodyShape::
  circle (::std::unique_ptr< circle_type > x)
  {
    this->circle_.set (std::move (x));
  }

  const bodyShape::box_optional& bodyShape::
  box () const
  {
    return this->box_;
  }

  bodyShape::box_optional& bodyShape::
  box ()
  {
    return this->box_;
  }

  void bodyShape::
  box (const box_type& x)
  {
    this->box_.set (x);
  }

  void bodyShape::
  box (const box_optional& x)
  {
    this->box_ = x;
  }

  void bodyShape::
  box (::std::unique_ptr< box_type > x)
  {
    this->box_.set (std::move (x));
  }


  // worldPositionComponent
  // 

  const worldPositionComponent::positionF_type& worldPositionComponent::
  positionF () const
  {
    return this->positionF_.get ();
  }

  worldPositionComponent::positionF_type& worldPositionComponent::
  positionF ()
  {
    return this->positionF_.get ();
  }

  void worldPositionComponent::
  positionF (const positionF_type& x)
  {
    this->positionF_.set (x);
  }

  void worldPositionComponent::
  positionF (::std::unique_ptr< positionF_type > x)
  {
    this->positionF_.set (std::move (x));
  }


  // physicsComponent
  // 

  const physicsComponent::friction_type& physicsComponent::
  friction () const
  {
    return this->friction_.get ();
  }

  physicsComponent::friction_type& physicsComponent::
  friction ()
  {
    return this->friction_.get ();
  }

  void physicsComponent::
  friction (const friction_type& x)
  {
    this->friction_.set (x);
  }

  void physicsComponent::
  friction (::std::unique_ptr< friction_type > x)
  {
    this->friction_.set (std::move (x));
  }

  const physicsComponent::bodyType_type& physicsComponent::
  bodyType () const
  {
    return this->bodyType_.get ();
  }

  physicsComponent::bodyType_type& physicsComponent::
  bodyType ()
  {
    return this->bodyType_.get ();
  }

  void physicsComponent::
  bodyType (const bodyType_type& x)
  {
    this->bodyType_.set (x);
  }

  void physicsComponent::
  bodyType (::std::unique_ptr< bodyType_type > x)
  {
    this->bodyType_.set (std::move (x));
  }

  const physicsComponent::bodyShape_type& physicsComponent::
  bodyShape () const
  {
    return this->bodyShape_.get ();
  }

  physicsComponent::bodyShape_type& physicsComponent::
  bodyShape ()
  {
    return this->bodyShape_.get ();
  }

  void physicsComponent::
  bodyShape (const bodyShape_type& x)
  {
    this->bodyShape_.set (x);
  }

  void physicsComponent::
  bodyShape (::std::unique_ptr< bodyShape_type > x)
  {
    this->bodyShape_.set (std::move (x));
  }

  const physicsComponent::isSensor_type& physicsComponent::
  isSensor () const
  {
    return this->isSensor_.get ();
  }

  physicsComponent::isSensor_type& physicsComponent::
  isSensor ()
  {
    return this->isSensor_.get ();
  }

  void physicsComponent::
  isSensor (const isSensor_type& x)
  {
    this->isSensor_.set (x);
  }

  const physicsComponent::contactHandler_sequence& physicsComponent::
  contactHandler () const
  {
    return this->contactHandler_;
  }

  physicsComponent::contactHandler_sequence& physicsComponent::
  contactHandler ()
  {
    return this->contactHandler_;
  }

  void physicsComponent::
  contactHandler (const contactHandler_sequence& s)
  {
    this->contactHandler_ = s;
  }


  // characterComponent
  // 


  // explosionCrate
  // 


  // circle
  // 

  const circle::positionF_type& circle::
  positionF () const
  {
    return this->positionF_.get ();
  }

  circle::positionF_type& circle::
  positionF ()
  {
    return this->positionF_.get ();
  }

  void circle::
  positionF (const positionF_type& x)
  {
    this->positionF_.set (x);
  }

  void circle::
  positionF (::std::unique_ptr< positionF_type > x)
  {
    this->positionF_.set (std::move (x));
  }

  const circle::radius_type& circle::
  radius () const
  {
    return this->radius_.get ();
  }

  circle::radius_type& circle::
  radius ()
  {
    return this->radius_.get ();
  }

  void circle::
  radius (const radius_type& x)
  {
    this->radius_.set (x);
  }


  // box
  // 

  const box::width_type& box::
  width () const
  {
    return this->width_.get ();
  }

  box::width_type& box::
  width ()
  {
    return this->width_.get ();
  }

  void box::
  width (const width_type& x)
  {
    this->width_.set (x);
  }

  const box::height_type& box::
  height () const
  {
    return this->height_.get ();
  }

  box::height_type& box::
  height ()
  {
    return this->height_.get ();
  }

  void box::
  height (const height_type& x)
  {
    this->height_.set (x);
  }

  const box::positionF_type& box::
  positionF () const
  {
    return this->positionF_.get ();
  }

  box::positionF_type& box::
  positionF ()
  {
    return this->positionF_.get ();
  }

  void box::
  positionF (const positionF_type& x)
  {
    this->positionF_.set (x);
  }

  void box::
  positionF (::std::unique_ptr< positionF_type > x)
  {
    this->positionF_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Components
{
  // componentName
  //

  componentName::
  componentName ()
  : ::xml_schema::string ()
  {
  }

  componentName::
  componentName (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  componentName::
  componentName (const componentName& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  componentName::
  componentName (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  componentName::
  componentName (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  componentName::
  componentName (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  componentName* componentName::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class componentName (*this, f, c);
  }

  componentName::
  ~componentName ()
  {
  }

  // component
  //

  component::
  component (const componentName_type& componentName)
  : ::xml_schema::type (),
    componentName_ (componentName, this),
    worldPositionComponent_ (this),
    physicsComponent_ (this),
    characterComponent_ (this),
    explosionCrate_ (this)
  {
  }

  component::
  component (const component& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    componentName_ (x.componentName_, f, this),
    worldPositionComponent_ (x.worldPositionComponent_, f, this),
    physicsComponent_ (x.physicsComponent_, f, this),
    characterComponent_ (x.characterComponent_, f, this),
    explosionCrate_ (x.explosionCrate_, f, this)
  {
  }

  component::
  component (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    componentName_ (this),
    worldPositionComponent_ (this),
    physicsComponent_ (this),
    characterComponent_ (this),
    explosionCrate_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void component::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // componentName
      //
      if (n.name () == "componentName" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< componentName_type > r (
          componentName_traits::create (i, f, this));

        if (!componentName_.present ())
        {
          this->componentName_.set (::std::move (r));
          continue;
        }
      }

      // worldPositionComponent
      //
      if (n.name () == "worldPositionComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< worldPositionComponent_type > r (
          worldPositionComponent_traits::create (i, f, this));

        if (!this->worldPositionComponent_)
        {
          this->worldPositionComponent_.set (::std::move (r));
          continue;
        }
      }

      // physicsComponent
      //
      if (n.name () == "physicsComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< physicsComponent_type > r (
          physicsComponent_traits::create (i, f, this));

        if (!this->physicsComponent_)
        {
          this->physicsComponent_.set (::std::move (r));
          continue;
        }
      }

      // characterComponent
      //
      if (n.name () == "characterComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< characterComponent_type > r (
          characterComponent_traits::create (i, f, this));

        if (!this->characterComponent_)
        {
          this->characterComponent_.set (::std::move (r));
          continue;
        }
      }

      // explosionCrate
      //
      if (n.name () == "explosionCrate" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< explosionCrate_type > r (
          explosionCrate_traits::create (i, f, this));

        if (!this->explosionCrate_)
        {
          this->explosionCrate_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!componentName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "componentName",
        "");
    }
  }

  component* component::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class component (*this, f, c);
  }

  component& component::
  operator= (const component& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->componentName_ = x.componentName_;
      this->worldPositionComponent_ = x.worldPositionComponent_;
      this->physicsComponent_ = x.physicsComponent_;
      this->characterComponent_ = x.characterComponent_;
      this->explosionCrate_ = x.explosionCrate_;
    }

    return *this;
  }

  component::
  ~component ()
  {
  }

  // floatCap
  //

  floatCap::
  floatCap (const ::xml_schema::float_& _xsd_float__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (_xsd_float__base)
  {
  }

  floatCap::
  floatCap (const floatCap& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  floatCap::
  floatCap (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  floatCap* floatCap::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class floatCap (*this, f, c);
  }

  floatCap::
  ~floatCap ()
  {
  }

  // bodyType
  //

  bodyType::
  bodyType ()
  : ::xml_schema::string ()
  {
  }

  bodyType::
  bodyType (const char* _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const ::std::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const ::xml_schema::string& _xsd_string_base)
  : ::xml_schema::string (_xsd_string_base)
  {
  }

  bodyType::
  bodyType (const bodyType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  bodyType::
  bodyType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  bodyType::
  bodyType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  bodyType::
  bodyType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  bodyType* bodyType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bodyType (*this, f, c);
  }

  bodyType::
  ~bodyType ()
  {
  }

  // bodyShape
  //

  bodyShape::
  bodyShape ()
  : ::xml_schema::type (),
    circle_ (this),
    box_ (this)
  {
  }

  bodyShape::
  bodyShape (const bodyShape& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    circle_ (x.circle_, f, this),
    box_ (x.box_, f, this)
  {
  }

  bodyShape::
  bodyShape (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    circle_ (this),
    box_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void bodyShape::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // circle
      //
      if (n.name () == "circle" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< circle_type > r (
          circle_traits::create (i, f, this));

        if (!this->circle_)
        {
          this->circle_.set (::std::move (r));
          continue;
        }
      }

      // box
      //
      if (n.name () == "box" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< box_type > r (
          box_traits::create (i, f, this));

        if (!this->box_)
        {
          this->box_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  bodyShape* bodyShape::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bodyShape (*this, f, c);
  }

  bodyShape& bodyShape::
  operator= (const bodyShape& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->circle_ = x.circle_;
      this->box_ = x.box_;
    }

    return *this;
  }

  bodyShape::
  ~bodyShape ()
  {
  }

  // worldPositionComponent
  //

  worldPositionComponent::
  worldPositionComponent (const positionF_type& positionF)
  : ::xml_schema::type (),
    positionF_ (positionF, this)
  {
  }

  worldPositionComponent::
  worldPositionComponent (::std::unique_ptr< positionF_type > positionF)
  : ::xml_schema::type (),
    positionF_ (std::move (positionF), this)
  {
  }

  worldPositionComponent::
  worldPositionComponent (const worldPositionComponent& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    positionF_ (x.positionF_, f, this)
  {
  }

  worldPositionComponent::
  worldPositionComponent (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    positionF_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void worldPositionComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // positionF
      //
      if (n.name () == "positionF" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< positionF_type > r (
          positionF_traits::create (i, f, this));

        if (!positionF_.present ())
        {
          this->positionF_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!positionF_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "positionF",
        "Common");
    }
  }

  worldPositionComponent* worldPositionComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class worldPositionComponent (*this, f, c);
  }

  worldPositionComponent& worldPositionComponent::
  operator= (const worldPositionComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->positionF_ = x.positionF_;
    }

    return *this;
  }

  worldPositionComponent::
  ~worldPositionComponent ()
  {
  }

  // physicsComponent
  //

  physicsComponent::
  physicsComponent (const friction_type& friction,
                    const bodyType_type& bodyType,
                    const bodyShape_type& bodyShape,
                    const isSensor_type& isSensor)
  : ::xml_schema::type (),
    friction_ (friction, this),
    bodyType_ (bodyType, this),
    bodyShape_ (bodyShape, this),
    isSensor_ (isSensor, this),
    contactHandler_ (this)
  {
  }

  physicsComponent::
  physicsComponent (const friction_type& friction,
                    const bodyType_type& bodyType,
                    ::std::unique_ptr< bodyShape_type > bodyShape,
                    const isSensor_type& isSensor)
  : ::xml_schema::type (),
    friction_ (friction, this),
    bodyType_ (bodyType, this),
    bodyShape_ (std::move (bodyShape), this),
    isSensor_ (isSensor, this),
    contactHandler_ (this)
  {
  }

  physicsComponent::
  physicsComponent (const physicsComponent& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    friction_ (x.friction_, f, this),
    bodyType_ (x.bodyType_, f, this),
    bodyShape_ (x.bodyShape_, f, this),
    isSensor_ (x.isSensor_, f, this),
    contactHandler_ (x.contactHandler_, f, this)
  {
  }

  physicsComponent::
  physicsComponent (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    friction_ (this),
    bodyType_ (this),
    bodyShape_ (this),
    isSensor_ (this),
    contactHandler_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void physicsComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // friction
      //
      if (n.name () == "friction" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< friction_type > r (
          friction_traits::create (i, f, this));

        if (!friction_.present ())
        {
          this->friction_.set (::std::move (r));
          continue;
        }
      }

      // bodyType
      //
      if (n.name () == "bodyType" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< bodyType_type > r (
          bodyType_traits::create (i, f, this));

        if (!bodyType_.present ())
        {
          this->bodyType_.set (::std::move (r));
          continue;
        }
      }

      // bodyShape
      //
      if (n.name () == "bodyShape" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< bodyShape_type > r (
          bodyShape_traits::create (i, f, this));

        if (!bodyShape_.present ())
        {
          this->bodyShape_.set (::std::move (r));
          continue;
        }
      }

      // isSensor
      //
      if (n.name () == "isSensor" && n.namespace_ ().empty ())
      {
        if (!isSensor_.present ())
        {
          this->isSensor_.set (isSensor_traits::create (i, f, this));
          continue;
        }
      }

      // contactHandler
      //
      if (n.name () == "contactHandler" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< contactHandler_type > r (
          contactHandler_traits::create (i, f, this));

        this->contactHandler_.push_back (::std::move (r));
        continue;
      }

      break;
    }

    if (!friction_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "friction",
        "");
    }

    if (!bodyType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bodyType",
        "");
    }

    if (!bodyShape_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bodyShape",
        "");
    }

    if (!isSensor_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "isSensor",
        "");
    }
  }

  physicsComponent* physicsComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class physicsComponent (*this, f, c);
  }

  physicsComponent& physicsComponent::
  operator= (const physicsComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->friction_ = x.friction_;
      this->bodyType_ = x.bodyType_;
      this->bodyShape_ = x.bodyShape_;
      this->isSensor_ = x.isSensor_;
      this->contactHandler_ = x.contactHandler_;
    }

    return *this;
  }

  physicsComponent::
  ~physicsComponent ()
  {
  }

  // characterComponent
  //

  characterComponent::
  characterComponent ()
  : ::xml_schema::type ()
  {
  }

  characterComponent::
  characterComponent (const characterComponent& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  characterComponent::
  characterComponent (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  characterComponent* characterComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class characterComponent (*this, f, c);
  }

  characterComponent::
  ~characterComponent ()
  {
  }

  // explosionCrate
  //

  explosionCrate::
  explosionCrate ()
  : ::xml_schema::type ()
  {
  }

  explosionCrate::
  explosionCrate (const explosionCrate& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  explosionCrate::
  explosionCrate (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  explosionCrate::
  explosionCrate (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  explosionCrate::
  explosionCrate (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  explosionCrate* explosionCrate::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class explosionCrate (*this, f, c);
  }

  explosionCrate::
  ~explosionCrate ()
  {
  }

  // circle
  //

  circle::
  circle (const positionF_type& positionF,
          const radius_type& radius)
  : ::xml_schema::type (),
    positionF_ (positionF, this),
    radius_ (radius, this)
  {
  }

  circle::
  circle (::std::unique_ptr< positionF_type > positionF,
          const radius_type& radius)
  : ::xml_schema::type (),
    positionF_ (std::move (positionF), this),
    radius_ (radius, this)
  {
  }

  circle::
  circle (const circle& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    positionF_ (x.positionF_, f, this),
    radius_ (x.radius_, f, this)
  {
  }

  circle::
  circle (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    positionF_ (this),
    radius_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void circle::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // positionF
      //
      if (n.name () == "positionF" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< positionF_type > r (
          positionF_traits::create (i, f, this));

        if (!positionF_.present ())
        {
          this->positionF_.set (::std::move (r));
          continue;
        }
      }

      // radius
      //
      if (n.name () == "radius" && n.namespace_ ().empty ())
      {
        if (!radius_.present ())
        {
          this->radius_.set (radius_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!positionF_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "positionF",
        "Common");
    }

    if (!radius_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "radius",
        "");
    }
  }

  circle* circle::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class circle (*this, f, c);
  }

  circle& circle::
  operator= (const circle& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->positionF_ = x.positionF_;
      this->radius_ = x.radius_;
    }

    return *this;
  }

  circle::
  ~circle ()
  {
  }

  // box
  //

  box::
  box (const width_type& width,
       const height_type& height,
       const positionF_type& positionF)
  : ::xml_schema::type (),
    width_ (width, this),
    height_ (height, this),
    positionF_ (positionF, this)
  {
  }

  box::
  box (const width_type& width,
       const height_type& height,
       ::std::unique_ptr< positionF_type > positionF)
  : ::xml_schema::type (),
    width_ (width, this),
    height_ (height, this),
    positionF_ (std::move (positionF), this)
  {
  }

  box::
  box (const box& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    width_ (x.width_, f, this),
    height_ (x.height_, f, this),
    positionF_ (x.positionF_, f, this)
  {
  }

  box::
  box (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    width_ (this),
    height_ (this),
    positionF_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void box::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // width
      //
      if (n.name () == "width" && n.namespace_ ().empty ())
      {
        if (!width_.present ())
        {
          this->width_.set (width_traits::create (i, f, this));
          continue;
        }
      }

      // height
      //
      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        if (!height_.present ())
        {
          this->height_.set (height_traits::create (i, f, this));
          continue;
        }
      }

      // positionF
      //
      if (n.name () == "positionF" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< positionF_type > r (
          positionF_traits::create (i, f, this));

        if (!positionF_.present ())
        {
          this->positionF_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!width_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "width",
        "");
    }

    if (!height_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "height",
        "");
    }

    if (!positionF_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "positionF",
        "Common");
    }
  }

  box* box::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class box (*this, f, c);
  }

  box& box::
  operator= (const box& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->width_ = x.width_;
      this->height_ = x.height_;
      this->positionF_ = x.positionF_;
    }

    return *this;
  }

  box::
  ~box ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Components
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

