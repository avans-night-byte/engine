// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "level-resources.hxx"

namespace LevelResources
{
  // floatCap
  // 


  // Level
  // 

  const Level::Object_sequence& Level::
  Object () const
  {
    return this->Object_;
  }

  Level::Object_sequence& Level::
  Object ()
  {
    return this->Object_;
  }

  void Level::
  Object (const Object_sequence& s)
  {
    this->Object_ = s;
  }

  const Level::name_optional& Level::
  name () const
  {
    return this->name_;
  }

  Level::name_optional& Level::
  name ()
  {
    return this->name_;
  }

  void Level::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void Level::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void Level::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }


  // Object
  // 

  const Object::Components_type& Object::
  Components () const
  {
    return this->Components_.get ();
  }

  Object::Components_type& Object::
  Components ()
  {
    return this->Components_.get ();
  }

  void Object::
  Components (const Components_type& x)
  {
    this->Components_.set (x);
  }

  void Object::
  Components (::std::unique_ptr< Components_type > x)
  {
    this->Components_.set (std::move (x));
  }

  const Object::name_optional& Object::
  name () const
  {
    return this->name_;
  }

  Object::name_optional& Object::
  name ()
  {
    return this->name_;
  }

  void Object::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void Object::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void Object::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }


  // Components
  // 

  const Components::WorldPositionComponent_type& Components::
  WorldPositionComponent () const
  {
    return this->WorldPositionComponent_.get ();
  }

  Components::WorldPositionComponent_type& Components::
  WorldPositionComponent ()
  {
    return this->WorldPositionComponent_.get ();
  }

  void Components::
  WorldPositionComponent (const WorldPositionComponent_type& x)
  {
    this->WorldPositionComponent_.set (x);
  }

  void Components::
  WorldPositionComponent (::std::unique_ptr< WorldPositionComponent_type > x)
  {
    this->WorldPositionComponent_.set (std::move (x));
  }

  const Components::PhysicsComponent_optional& Components::
  PhysicsComponent () const
  {
    return this->PhysicsComponent_;
  }

  Components::PhysicsComponent_optional& Components::
  PhysicsComponent ()
  {
    return this->PhysicsComponent_;
  }

  void Components::
  PhysicsComponent (const PhysicsComponent_type& x)
  {
    this->PhysicsComponent_.set (x);
  }

  void Components::
  PhysicsComponent (const PhysicsComponent_optional& x)
  {
    this->PhysicsComponent_ = x;
  }

  void Components::
  PhysicsComponent (::std::unique_ptr< PhysicsComponent_type > x)
  {
    this->PhysicsComponent_.set (std::move (x));
  }


  // WorldPositionComponent
  // 

  const WorldPositionComponent::position_type& WorldPositionComponent::
  position () const
  {
    return this->position_.get ();
  }

  WorldPositionComponent::position_type& WorldPositionComponent::
  position ()
  {
    return this->position_.get ();
  }

  void WorldPositionComponent::
  position (const position_type& x)
  {
    this->position_.set (x);
  }

  void WorldPositionComponent::
  position (::std::unique_ptr< position_type > x)
  {
    this->position_.set (std::move (x));
  }


  // PhysicsComponent
  // 

  const PhysicsComponent::friction_type& PhysicsComponent::
  friction () const
  {
    return this->friction_.get ();
  }

  PhysicsComponent::friction_type& PhysicsComponent::
  friction ()
  {
    return this->friction_.get ();
  }

  void PhysicsComponent::
  friction (const friction_type& x)
  {
    this->friction_.set (x);
  }

  void PhysicsComponent::
  friction (::std::unique_ptr< friction_type > x)
  {
    this->friction_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace LevelResources
{
  // floatCap
  //

  floatCap::
  floatCap (const ::xml_schema::float_& _xsd_float__base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (_xsd_float__base)
  {
  }

  floatCap::
  floatCap (const floatCap& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  floatCap::
  floatCap (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  floatCap::
  floatCap (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::float_, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  floatCap* floatCap::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class floatCap (*this, f, c);
  }

  floatCap::
  ~floatCap ()
  {
  }

  // Level
  //

  Level::
  Level ()
  : ::xml_schema::type (),
    Object_ (this),
    name_ (this)
  {
  }

  Level::
  Level (const Level& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Object_ (x.Object_, f, this),
    name_ (x.name_, f, this)
  {
  }

  Level::
  Level (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Object_ (this),
    name_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Level::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Object
      //
      if (n.name () == "Object" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Object_type > r (
          Object_traits::create (i, f, this));

        this->Object_.push_back (::std::move (r));
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        this->name_.set (name_traits::create (i, f, this));
        continue;
      }
    }
  }

  Level* Level::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Level (*this, f, c);
  }

  Level& Level::
  operator= (const Level& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->Object_ = x.Object_;
      this->name_ = x.name_;
    }

    return *this;
  }

  Level::
  ~Level ()
  {
  }

  // Object
  //

  Object::
  Object (const Components_type& Components)
  : ::xml_schema::type (),
    Components_ (Components, this),
    name_ (this)
  {
  }

  Object::
  Object (::std::unique_ptr< Components_type > Components)
  : ::xml_schema::type (),
    Components_ (std::move (Components), this),
    name_ (this)
  {
  }

  Object::
  Object (const Object& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Components_ (x.Components_, f, this),
    name_ (x.name_, f, this)
  {
  }

  Object::
  Object (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Components_ (this),
    name_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void Object::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Components
      //
      if (n.name () == "Components" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< Components_type > r (
          Components_traits::create (i, f, this));

        if (!Components_.present ())
        {
          this->Components_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!Components_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Components",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        this->name_.set (name_traits::create (i, f, this));
        continue;
      }
    }
  }

  Object* Object::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Object (*this, f, c);
  }

  Object& Object::
  operator= (const Object& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->Components_ = x.Components_;
      this->name_ = x.name_;
    }

    return *this;
  }

  Object::
  ~Object ()
  {
  }

  // Components
  //

  Components::
  Components (const WorldPositionComponent_type& WorldPositionComponent)
  : ::xml_schema::type (),
    WorldPositionComponent_ (WorldPositionComponent, this),
    PhysicsComponent_ (this)
  {
  }

  Components::
  Components (::std::unique_ptr< WorldPositionComponent_type > WorldPositionComponent)
  : ::xml_schema::type (),
    WorldPositionComponent_ (std::move (WorldPositionComponent), this),
    PhysicsComponent_ (this)
  {
  }

  Components::
  Components (const Components& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    WorldPositionComponent_ (x.WorldPositionComponent_, f, this),
    PhysicsComponent_ (x.PhysicsComponent_, f, this)
  {
  }

  Components::
  Components (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    WorldPositionComponent_ (this),
    PhysicsComponent_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Components::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // WorldPositionComponent
      //
      if (n.name () == "WorldPositionComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< WorldPositionComponent_type > r (
          WorldPositionComponent_traits::create (i, f, this));

        if (!WorldPositionComponent_.present ())
        {
          this->WorldPositionComponent_.set (::std::move (r));
          continue;
        }
      }

      // PhysicsComponent
      //
      if (n.name () == "PhysicsComponent" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< PhysicsComponent_type > r (
          PhysicsComponent_traits::create (i, f, this));

        if (!this->PhysicsComponent_)
        {
          this->PhysicsComponent_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!WorldPositionComponent_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "WorldPositionComponent",
        "");
    }
  }

  Components* Components::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class Components (*this, f, c);
  }

  Components& Components::
  operator= (const Components& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->WorldPositionComponent_ = x.WorldPositionComponent_;
      this->PhysicsComponent_ = x.PhysicsComponent_;
    }

    return *this;
  }

  Components::
  ~Components ()
  {
  }

  // WorldPositionComponent
  //

  WorldPositionComponent::
  WorldPositionComponent (const position_type& position)
  : ::xml_schema::type (),
    position_ (position, this)
  {
  }

  WorldPositionComponent::
  WorldPositionComponent (::std::unique_ptr< position_type > position)
  : ::xml_schema::type (),
    position_ (std::move (position), this)
  {
  }

  WorldPositionComponent::
  WorldPositionComponent (const WorldPositionComponent& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    position_ (x.position_, f, this)
  {
  }

  WorldPositionComponent::
  WorldPositionComponent (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    position_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void WorldPositionComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // position
      //
      if (n.name () == "position" && n.namespace_ () == "Common")
      {
        ::std::unique_ptr< position_type > r (
          position_traits::create (i, f, this));

        if (!position_.present ())
        {
          this->position_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!position_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "position",
        "Common");
    }
  }

  WorldPositionComponent* WorldPositionComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class WorldPositionComponent (*this, f, c);
  }

  WorldPositionComponent& WorldPositionComponent::
  operator= (const WorldPositionComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->position_ = x.position_;
    }

    return *this;
  }

  WorldPositionComponent::
  ~WorldPositionComponent ()
  {
  }

  // PhysicsComponent
  //

  PhysicsComponent::
  PhysicsComponent (const friction_type& friction)
  : ::xml_schema::type (),
    friction_ (friction, this)
  {
  }

  PhysicsComponent::
  PhysicsComponent (const PhysicsComponent& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    friction_ (x.friction_, f, this)
  {
  }

  PhysicsComponent::
  PhysicsComponent (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    friction_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void PhysicsComponent::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // friction
      //
      if (n.name () == "friction" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< friction_type > r (
          friction_traits::create (i, f, this));

        if (!friction_.present ())
        {
          this->friction_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!friction_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "friction",
        "");
    }
  }

  PhysicsComponent* PhysicsComponent::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PhysicsComponent (*this, f, c);
  }

  PhysicsComponent& PhysicsComponent::
  operator= (const PhysicsComponent& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->friction_ = x.friction_;
    }

    return *this;
  }

  PhysicsComponent::
  ~PhysicsComponent ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace LevelResources
{
  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LevelResources::Level_ (isrc, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LevelResources::Level_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::LevelResources::Level_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LevelResources::Level_ (isrc, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LevelResources::Level_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::LevelResources::Level_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::LevelResources::Level > (
      ::LevelResources::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (const ::xercesc::DOMDocument& doc,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::LevelResources::Level > (
        ::LevelResources::Level_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Level" &&
        n.namespace_ () == "LevelResources")
    {
      ::std::unique_ptr< ::LevelResources::Level > r (
        ::xsd::cxx::tree::traits< ::LevelResources::Level, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Level",
      "LevelResources");
  }

  ::std::unique_ptr< ::LevelResources::Level >
  Level_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Level" &&
        n.namespace_ () == "LevelResources")
    {
      ::std::unique_ptr< ::LevelResources::Level > r (
        ::xsd::cxx::tree::traits< ::LevelResources::Level, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Level",
      "LevelResources");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

