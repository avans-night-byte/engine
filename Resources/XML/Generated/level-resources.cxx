// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "level-resources.hxx"

// Level
// 

const Level::Object_sequence& Level::
Object () const
{
  return this->Object_;
}

Level::Object_sequence& Level::
Object ()
{
  return this->Object_;
}

void Level::
Object (const Object_sequence& s)
{
  this->Object_ = s;
}

const Level::name_optional& Level::
name () const
{
  return this->name_;
}

Level::name_optional& Level::
name ()
{
  return this->name_;
}

void Level::
name (const name_type& x)
{
  this->name_.set (x);
}

void Level::
name (const name_optional& x)
{
  this->name_ = x;
}

void Level::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}


// Object
// 

const Object::Component_sequence& Object::
Component () const
{
  return this->Component_;
}

Object::Component_sequence& Object::
Component ()
{
  return this->Component_;
}

void Object::
Component (const Component_sequence& s)
{
  this->Component_ = s;
}

const Object::name_optional& Object::
name () const
{
  return this->name_;
}

Object::name_optional& Object::
name ()
{
  return this->name_;
}

void Object::
name (const name_type& x)
{
  this->name_.set (x);
}

void Object::
name (const name_optional& x)
{
  this->name_ = x;
}

void Object::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}


// Component
// 

const Component::Param_sequence& Component::
Param () const
{
  return this->Param_;
}

Component::Param_sequence& Component::
Param ()
{
  return this->Param_;
}

void Component::
Param (const Param_sequence& s)
{
  this->Param_ = s;
}

const Component::name_optional& Component::
name () const
{
  return this->name_;
}

Component::name_optional& Component::
name ()
{
  return this->name_;
}

void Component::
name (const name_type& x)
{
  this->name_.set (x);
}

void Component::
name (const name_optional& x)
{
  this->name_ = x;
}

void Component::
name (::std::unique_ptr< name_type > x)
{
  this->name_.set (std::move (x));
}


// Param
// 

const Param::Name_optional& Param::
Name () const
{
  return this->Name_;
}

Param::Name_optional& Param::
Name ()
{
  return this->Name_;
}

void Param::
Name (const Name_type& x)
{
  this->Name_.set (x);
}

void Param::
Name (const Name_optional& x)
{
  this->Name_ = x;
}

void Param::
Name (::std::unique_ptr< Name_type > x)
{
  this->Name_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// Level
//

Level::
Level ()
: ::xml_schema::type (),
  Object_ (this),
  name_ (this)
{
}

Level::
Level (const Level& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Object_ (x.Object_, f, this),
  name_ (x.name_, f, this)
{
}

Level::
Level (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Object_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Level::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Object
    //
    if (n.name () == "Object" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Object_type > r (
        Object_traits::create (i, f, this));

      this->Object_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }
}

Level* Level::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Level (*this, f, c);
}

Level& Level::
operator= (const Level& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Object_ = x.Object_;
    this->name_ = x.name_;
  }

  return *this;
}

Level::
~Level ()
{
}

// Object
//

Object::
Object ()
: ::xml_schema::type (),
  Component_ (this),
  name_ (this)
{
}

Object::
Object (const Object& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Component_ (x.Component_, f, this),
  name_ (x.name_, f, this)
{
}

Object::
Object (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Component_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Object::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Component
    //
    if (n.name () == "Component" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Component_type > r (
        Component_traits::create (i, f, this));

      this->Component_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }
}

Object* Object::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Object (*this, f, c);
}

Object& Object::
operator= (const Object& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Component_ = x.Component_;
    this->name_ = x.name_;
  }

  return *this;
}

Object::
~Object ()
{
}

// Component
//

Component::
Component ()
: ::xml_schema::type (),
  Param_ (this),
  name_ (this)
{
}

Component::
Component (const Component& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Param_ (x.Param_, f, this),
  name_ (x.name_, f, this)
{
}

Component::
Component (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Param_ (this),
  name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void Component::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Param
    //
    if (n.name () == "Param" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< Param_type > r (
        Param_traits::create (i, f, this));

      this->Param_.push_back (::std::move (r));
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      this->name_.set (name_traits::create (i, f, this));
      continue;
    }
  }
}

Component* Component::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Component (*this, f, c);
}

Component& Component::
operator= (const Component& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->Param_ = x.Param_;
    this->name_ = x.name_;
  }

  return *this;
}

Component::
~Component ()
{
}

// Param
//

Param::
Param ()
: ::xml_schema::string (),
  Name_ (this)
{
}

Param::
Param (const char* _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  Name_ (this)
{
}

Param::
Param (const ::std::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  Name_ (this)
{
}

Param::
Param (const ::xml_schema::string& _xsd_string_base)
: ::xml_schema::string (_xsd_string_base),
  Name_ (this)
{
}

Param::
Param (const Param& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::string (x, f, c),
  Name_ (x.Name_, f, this)
{
}

Param::
Param (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
  Name_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
    this->parse (p, f);
  }
}

void Param::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Name" && n.namespace_ ().empty ())
    {
      this->Name_.set (Name_traits::create (i, f, this));
      continue;
    }
  }
}

Param* Param::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Param (*this, f, c);
}

Param& Param::
operator= (const Param& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::string& > (*this) = x;
    this->Name_ = x.Name_;
  }

  return *this;
}

Param::
~Param ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::Level >
Level_ (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Level_ (isrc, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Level_ (isrc, h, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::Level_ (isrc, h, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Level_ (isrc, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Level_ (isrc, h, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::Level_ (isrc, h, f, p);
}

::std::unique_ptr< ::Level >
Level_ (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::Level > (
    ::Level_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::Level >
Level_ (const ::xercesc::DOMDocument& doc,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::Level > (
      ::Level_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "Level" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Level > r (
      ::xsd::cxx::tree::traits< ::Level, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Level",
    "");
}

::std::unique_ptr< ::Level >
Level_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "Level" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::Level > r (
      ::xsd::cxx::tree::traits< ::Level, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "Level",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

