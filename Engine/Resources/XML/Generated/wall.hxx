// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_________ENGINE_RESOURCES_XML_SCHEMAS_WALL_HXX
#define CXX_________ENGINE_RESOURCES_XML_SCHEMAS_WALL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class walls;
class wall;
class pricing;
class powers;
class upgrade;

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "common.hxx"

class walls: public ::xml_schema::type
{
  public:
  // className
  //
  typedef ::xml_schema::string className_type;
  typedef ::xsd::cxx::tree::traits< className_type, char > className_traits;

  const className_type&
  className () const;

  className_type&
  className ();

  void
  className (const className_type& x);

  void
  className (::std::unique_ptr< className_type > p);

  // wall
  //
  typedef ::wall wall_type;
  typedef ::xsd::cxx::tree::sequence< wall_type > wall_sequence;
  typedef wall_sequence::iterator wall_iterator;
  typedef wall_sequence::const_iterator wall_const_iterator;
  typedef ::xsd::cxx::tree::traits< wall_type, char > wall_traits;

  const wall_sequence&
  wall () const;

  wall_sequence&
  wall ();

  void
  wall (const wall_sequence& s);

  // Constructors.
  //
  walls (const className_type&);

  walls (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  walls (const walls& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual walls*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  walls&
  operator= (const walls& x);

  virtual 
  ~walls ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< className_type > className_;
  wall_sequence wall_;
};

class wall: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::unique_ptr< name_type > p);

  // level
  //
  typedef ::xml_schema::id level_type;
  typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

  const level_type&
  level () const;

  level_type&
  level ();

  void
  level (const level_type& x);

  void
  level (::std::unique_ptr< level_type > p);

  // baseHealth
  //
  typedef ::xml_schema::int_ baseHealth_type;
  typedef ::xsd::cxx::tree::traits< baseHealth_type, char > baseHealth_traits;

  const baseHealth_type&
  baseHealth () const;

  baseHealth_type&
  baseHealth ();

  void
  baseHealth (const baseHealth_type& x);

  // pricing
  //
  typedef ::pricing pricing_type;
  typedef ::xsd::cxx::tree::traits< pricing_type, char > pricing_traits;

  const pricing_type&
  pricing () const;

  pricing_type&
  pricing ();

  void
  pricing (const pricing_type& x);

  void
  pricing (::std::unique_ptr< pricing_type > p);

  // powers
  //
  typedef ::powers powers_type;
  typedef ::xsd::cxx::tree::optional< powers_type > powers_optional;
  typedef ::xsd::cxx::tree::traits< powers_type, char > powers_traits;

  const powers_optional&
  powers () const;

  powers_optional&
  powers ();

  void
  powers (const powers_type& x);

  void
  powers (const powers_optional& x);

  void
  powers (::std::unique_ptr< powers_type > p);

  // assets
  //
  typedef ::assets assets_type;
  typedef ::xsd::cxx::tree::traits< assets_type, char > assets_traits;

  const assets_type&
  assets () const;

  assets_type&
  assets ();

  void
  assets (const assets_type& x);

  void
  assets (::std::unique_ptr< assets_type > p);

  // collider
  //
  typedef ::collider collider_type;
  typedef ::xsd::cxx::tree::traits< collider_type, char > collider_traits;

  const collider_type&
  collider () const;

  collider_type&
  collider ();

  void
  collider (const collider_type& x);

  void
  collider (::std::unique_ptr< collider_type > p);

  // events
  //
  typedef ::events events_type;
  typedef ::xsd::cxx::tree::traits< events_type, char > events_traits;

  const events_type&
  events () const;

  events_type&
  events ();

  void
  events (const events_type& x);

  void
  events (::std::unique_ptr< events_type > p);

  // Constructors.
  //
  wall (const name_type&,
        const level_type&,
        const baseHealth_type&,
        const pricing_type&,
        const assets_type&,
        const collider_type&,
        const events_type&);

  wall (const name_type&,
        const level_type&,
        const baseHealth_type&,
        ::std::unique_ptr< pricing_type >,
        ::std::unique_ptr< assets_type >,
        ::std::unique_ptr< collider_type >,
        ::std::unique_ptr< events_type >);

  wall (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  wall (const wall& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual wall*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  wall&
  operator= (const wall& x);

  virtual 
  ~wall ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< level_type > level_;
  ::xsd::cxx::tree::one< baseHealth_type > baseHealth_;
  ::xsd::cxx::tree::one< pricing_type > pricing_;
  powers_optional powers_;
  ::xsd::cxx::tree::one< assets_type > assets_;
  ::xsd::cxx::tree::one< collider_type > collider_;
  ::xsd::cxx::tree::one< events_type > events_;
};

class pricing: public ::xml_schema::type
{
  public:
  // cost
  //
  typedef ::xml_schema::int_ cost_type;
  typedef ::xsd::cxx::tree::traits< cost_type, char > cost_traits;

  const cost_type&
  cost () const;

  cost_type&
  cost ();

  void
  cost (const cost_type& x);

  // upgrade
  //
  typedef ::upgrade upgrade_type;
  typedef ::xsd::cxx::tree::optional< upgrade_type > upgrade_optional;
  typedef ::xsd::cxx::tree::traits< upgrade_type, char > upgrade_traits;

  const upgrade_optional&
  upgrade () const;

  upgrade_optional&
  upgrade ();

  void
  upgrade (const upgrade_type& x);

  void
  upgrade (const upgrade_optional& x);

  void
  upgrade (::std::unique_ptr< upgrade_type > p);

  // Constructors.
  //
  pricing (const cost_type&);

  pricing (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  pricing (const pricing& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual pricing*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  pricing&
  operator= (const pricing& x);

  virtual 
  ~pricing ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cost_type > cost_;
  upgrade_optional upgrade_;
};

class powers: public ::xml_schema::type
{
  public:
  // restoresHP
  //
  typedef ::xml_schema::int_ restoresHP_type;
  typedef ::xsd::cxx::tree::optional< restoresHP_type > restoresHP_optional;
  typedef ::xsd::cxx::tree::traits< restoresHP_type, char > restoresHP_traits;

  const restoresHP_optional&
  restoresHP () const;

  restoresHP_optional&
  restoresHP ();

  void
  restoresHP (const restoresHP_type& x);

  void
  restoresHP (const restoresHP_optional& x);

  // explosionImmune
  //
  typedef ::xml_schema::boolean explosionImmune_type;
  typedef ::xsd::cxx::tree::optional< explosionImmune_type > explosionImmune_optional;
  typedef ::xsd::cxx::tree::traits< explosionImmune_type, char > explosionImmune_traits;

  const explosionImmune_optional&
  explosionImmune () const;

  explosionImmune_optional&
  explosionImmune ();

  void
  explosionImmune (const explosionImmune_type& x);

  void
  explosionImmune (const explosionImmune_optional& x);

  // Constructors.
  //
  powers ();

  powers (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  powers (const powers& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual powers*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  powers&
  operator= (const powers& x);

  virtual 
  ~powers ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  restoresHP_optional restoresHP_;
  explosionImmune_optional explosionImmune_;
};

class upgrade: public ::xml_schema::type
{
  public:
  // cost
  //
  typedef ::xml_schema::int_ cost_type;
  typedef ::xsd::cxx::tree::traits< cost_type, char > cost_traits;

  const cost_type&
  cost () const;

  cost_type&
  cost ();

  void
  cost (const cost_type& x);

  // nextLevel
  //
  typedef ::xml_schema::idref nextLevel_type;
  typedef ::xsd::cxx::tree::traits< nextLevel_type, char > nextLevel_traits;

  const nextLevel_type&
  nextLevel () const;

  nextLevel_type&
  nextLevel ();

  void
  nextLevel (const nextLevel_type& x);

  void
  nextLevel (::std::unique_ptr< nextLevel_type > p);

  // Constructors.
  //
  upgrade (const cost_type&,
           const nextLevel_type&);

  upgrade (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  upgrade (const upgrade& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual upgrade*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  upgrade&
  operator= (const upgrade& x);

  virtual 
  ~upgrade ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< cost_type > cost_;
  ::xsd::cxx::tree::one< nextLevel_type > nextLevel_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::unique_ptr< ::walls >
walls_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::walls >
walls_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::walls >
walls_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::unique_ptr< ::wall >
wall_ (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::unique_ptr< ::wall >
wall_ (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::unique_ptr< ::wall >
wall_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________ENGINE_RESOURCES_XML_SCHEMAS_WALL_HXX
