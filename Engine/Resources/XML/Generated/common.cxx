// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "common.hxx"

// repeatType
// 

repeatType::
repeatType (value v)
: ::xml_schema::string (_xsd_repeatType_literals_[v])
{
}

repeatType::
repeatType (const char* v)
: ::xml_schema::string (v)
{
}

repeatType::
repeatType (const ::std::string& v)
: ::xml_schema::string (v)
{
}

repeatType::
repeatType (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

repeatType::
repeatType (const repeatType& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

repeatType& repeatType::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_repeatType_literals_[v]);

  return *this;
}


// assets
// 

const assets::base_type& assets::
base () const
{
  return this->base_.get ();
}

assets::base_type& assets::
base ()
{
  return this->base_.get ();
}

void assets::
base (const base_type& x)
{
  this->base_.set (x);
}

void assets::
base (::std::unique_ptr< base_type > x)
{
  this->base_.set (std::move (x));
}


// events
// 

const events::onEnter_optional& events::
onEnter () const
{
  return this->onEnter_;
}

events::onEnter_optional& events::
onEnter ()
{
  return this->onEnter_;
}

void events::
onEnter (const onEnter_type& x)
{
  this->onEnter_.set (x);
}

void events::
onEnter (const onEnter_optional& x)
{
  this->onEnter_ = x;
}

void events::
onEnter (::std::unique_ptr< onEnter_type > x)
{
  this->onEnter_.set (std::move (x));
}

const events::onLeave_optional& events::
onLeave () const
{
  return this->onLeave_;
}

events::onLeave_optional& events::
onLeave ()
{
  return this->onLeave_;
}

void events::
onLeave (const onLeave_type& x)
{
  this->onLeave_.set (x);
}

void events::
onLeave (const onLeave_optional& x)
{
  this->onLeave_ = x;
}

void events::
onLeave (::std::unique_ptr< onLeave_type > x)
{
  this->onLeave_.set (std::move (x));
}

const events::onAttacked_optional& events::
onAttacked () const
{
  return this->onAttacked_;
}

events::onAttacked_optional& events::
onAttacked ()
{
  return this->onAttacked_;
}

void events::
onAttacked (const onAttacked_type& x)
{
  this->onAttacked_.set (x);
}

void events::
onAttacked (const onAttacked_optional& x)
{
  this->onAttacked_ = x;
}

void events::
onAttacked (::std::unique_ptr< onAttacked_type > x)
{
  this->onAttacked_.set (std::move (x));
}

const events::onDestroyed_optional& events::
onDestroyed () const
{
  return this->onDestroyed_;
}

events::onDestroyed_optional& events::
onDestroyed ()
{
  return this->onDestroyed_;
}

void events::
onDestroyed (const onDestroyed_type& x)
{
  this->onDestroyed_.set (x);
}

void events::
onDestroyed (const onDestroyed_optional& x)
{
  this->onDestroyed_ = x;
}

void events::
onDestroyed (::std::unique_ptr< onDestroyed_type > x)
{
  this->onDestroyed_.set (std::move (x));
}

const events::onAttack_optional& events::
onAttack () const
{
  return this->onAttack_;
}

events::onAttack_optional& events::
onAttack ()
{
  return this->onAttack_;
}

void events::
onAttack (const onAttack_type& x)
{
  this->onAttack_.set (x);
}

void events::
onAttack (const onAttack_optional& x)
{
  this->onAttack_ = x;
}

void events::
onAttack (::std::unique_ptr< onAttack_type > x)
{
  this->onAttack_.set (std::move (x));
}


// collider
// 

const collider::size_type& collider::
size () const
{
  return this->size_.get ();
}

collider::size_type& collider::
size ()
{
  return this->size_.get ();
}

void collider::
size (const size_type& x)
{
  this->size_.set (x);
}

void collider::
size (::std::unique_ptr< size_type > x)
{
  this->size_.set (std::move (x));
}

const collider::hasCollision_type& collider::
hasCollision () const
{
  return this->hasCollision_.get ();
}

collider::hasCollision_type& collider::
hasCollision ()
{
  return this->hasCollision_.get ();
}

void collider::
hasCollision (const hasCollision_type& x)
{
  this->hasCollision_.set (x);
}


// position
// 

const position::x_type& position::
x () const
{
  return this->x_.get ();
}

position::x_type& position::
x ()
{
  return this->x_.get ();
}

void position::
x (const x_type& x)
{
  this->x_.set (x);
}

const position::y_type& position::
y () const
{
  return this->y_.get ();
}

position::y_type& position::
y ()
{
  return this->y_.get ();
}

void position::
y (const y_type& x)
{
  this->y_.set (x);
}


// base
// 

const base::file_type& base::
file () const
{
  return this->file_.get ();
}

base::file_type& base::
file ()
{
  return this->file_.get ();
}

void base::
file (const file_type& x)
{
  this->file_.set (x);
}

void base::
file (::std::unique_ptr< file_type > x)
{
  this->file_.set (std::move (x));
}

const base::repeat_type& base::
repeat () const
{
  return this->repeat_.get ();
}

base::repeat_type& base::
repeat ()
{
  return this->repeat_.get ();
}

void base::
repeat (const repeat_type& x)
{
  this->repeat_.set (x);
}

void base::
repeat (::std::unique_ptr< repeat_type > x)
{
  this->repeat_.set (std::move (x));
}

const base::repeat_type& base::
repeat_default_value ()
{
  return repeat_default_value_;
}


// onEnter
// 

const onEnter::soundAction_optional& onEnter::
soundAction () const
{
  return this->soundAction_;
}

onEnter::soundAction_optional& onEnter::
soundAction ()
{
  return this->soundAction_;
}

void onEnter::
soundAction (const soundAction_type& x)
{
  this->soundAction_.set (x);
}

void onEnter::
soundAction (const soundAction_optional& x)
{
  this->soundAction_ = x;
}

void onEnter::
soundAction (::std::unique_ptr< soundAction_type > x)
{
  this->soundAction_.set (std::move (x));
}

const onEnter::loadAction_optional& onEnter::
loadAction () const
{
  return this->loadAction_;
}

onEnter::loadAction_optional& onEnter::
loadAction ()
{
  return this->loadAction_;
}

void onEnter::
loadAction (const loadAction_type& x)
{
  this->loadAction_.set (x);
}

void onEnter::
loadAction (const loadAction_optional& x)
{
  this->loadAction_ = x;
}

void onEnter::
loadAction (::std::unique_ptr< loadAction_type > x)
{
  this->loadAction_.set (std::move (x));
}


// onLeave
// 

const onLeave::soundAction_optional& onLeave::
soundAction () const
{
  return this->soundAction_;
}

onLeave::soundAction_optional& onLeave::
soundAction ()
{
  return this->soundAction_;
}

void onLeave::
soundAction (const soundAction_type& x)
{
  this->soundAction_.set (x);
}

void onLeave::
soundAction (const soundAction_optional& x)
{
  this->soundAction_ = x;
}

void onLeave::
soundAction (::std::unique_ptr< soundAction_type > x)
{
  this->soundAction_.set (std::move (x));
}

const onLeave::loadAction_optional& onLeave::
loadAction () const
{
  return this->loadAction_;
}

onLeave::loadAction_optional& onLeave::
loadAction ()
{
  return this->loadAction_;
}

void onLeave::
loadAction (const loadAction_type& x)
{
  this->loadAction_.set (x);
}

void onLeave::
loadAction (const loadAction_optional& x)
{
  this->loadAction_ = x;
}

void onLeave::
loadAction (::std::unique_ptr< loadAction_type > x)
{
  this->loadAction_.set (std::move (x));
}


// onAttacked
// 

const onAttacked::soundAction_optional& onAttacked::
soundAction () const
{
  return this->soundAction_;
}

onAttacked::soundAction_optional& onAttacked::
soundAction ()
{
  return this->soundAction_;
}

void onAttacked::
soundAction (const soundAction_type& x)
{
  this->soundAction_.set (x);
}

void onAttacked::
soundAction (const soundAction_optional& x)
{
  this->soundAction_ = x;
}

void onAttacked::
soundAction (::std::unique_ptr< soundAction_type > x)
{
  this->soundAction_.set (std::move (x));
}

const onAttacked::loadAction_optional& onAttacked::
loadAction () const
{
  return this->loadAction_;
}

onAttacked::loadAction_optional& onAttacked::
loadAction ()
{
  return this->loadAction_;
}

void onAttacked::
loadAction (const loadAction_type& x)
{
  this->loadAction_.set (x);
}

void onAttacked::
loadAction (const loadAction_optional& x)
{
  this->loadAction_ = x;
}

void onAttacked::
loadAction (::std::unique_ptr< loadAction_type > x)
{
  this->loadAction_.set (std::move (x));
}


// onDestroyed
// 

const onDestroyed::soundAction_optional& onDestroyed::
soundAction () const
{
  return this->soundAction_;
}

onDestroyed::soundAction_optional& onDestroyed::
soundAction ()
{
  return this->soundAction_;
}

void onDestroyed::
soundAction (const soundAction_type& x)
{
  this->soundAction_.set (x);
}

void onDestroyed::
soundAction (const soundAction_optional& x)
{
  this->soundAction_ = x;
}

void onDestroyed::
soundAction (::std::unique_ptr< soundAction_type > x)
{
  this->soundAction_.set (std::move (x));
}

const onDestroyed::loadAction_optional& onDestroyed::
loadAction () const
{
  return this->loadAction_;
}

onDestroyed::loadAction_optional& onDestroyed::
loadAction ()
{
  return this->loadAction_;
}

void onDestroyed::
loadAction (const loadAction_type& x)
{
  this->loadAction_.set (x);
}

void onDestroyed::
loadAction (const loadAction_optional& x)
{
  this->loadAction_ = x;
}

void onDestroyed::
loadAction (::std::unique_ptr< loadAction_type > x)
{
  this->loadAction_.set (std::move (x));
}


// onAttack
// 

const onAttack::soundAction_optional& onAttack::
soundAction () const
{
  return this->soundAction_;
}

onAttack::soundAction_optional& onAttack::
soundAction ()
{
  return this->soundAction_;
}

void onAttack::
soundAction (const soundAction_type& x)
{
  this->soundAction_.set (x);
}

void onAttack::
soundAction (const soundAction_optional& x)
{
  this->soundAction_ = x;
}

void onAttack::
soundAction (::std::unique_ptr< soundAction_type > x)
{
  this->soundAction_.set (std::move (x));
}

const onAttack::loadAction_optional& onAttack::
loadAction () const
{
  return this->loadAction_;
}

onAttack::loadAction_optional& onAttack::
loadAction ()
{
  return this->loadAction_;
}

void onAttack::
loadAction (const loadAction_type& x)
{
  this->loadAction_.set (x);
}

void onAttack::
loadAction (const loadAction_optional& x)
{
  this->loadAction_ = x;
}

void onAttack::
loadAction (::std::unique_ptr< loadAction_type > x)
{
  this->loadAction_.set (std::move (x));
}


// size
// 

const size::width_type& size::
width () const
{
  return this->width_.get ();
}

size::width_type& size::
width ()
{
  return this->width_.get ();
}

void size::
width (const width_type& x)
{
  this->width_.set (x);
}

const size::height_type& size::
height () const
{
  return this->height_.get ();
}

size::height_type& size::
height ()
{
  return this->height_.get ();
}

void size::
height (const height_type& x)
{
  this->height_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// repeatType
//

repeatType::
repeatType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_repeatType_convert ();
}

repeatType::
repeatType (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_repeatType_convert ();
}

repeatType::
repeatType (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_repeatType_convert ();
}

repeatType* repeatType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class repeatType (*this, f, c);
}

repeatType::value repeatType::
_xsd_repeatType_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_repeatType_literals_);
  const value* i (::std::lower_bound (
                    _xsd_repeatType_indexes_,
                    _xsd_repeatType_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_repeatType_indexes_ + 4 || _xsd_repeatType_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const repeatType::
_xsd_repeatType_literals_[4] =
{
  "no-repeat",
  "repeat",
  "repeat-y",
  "repeat-x"
};

const repeatType::value repeatType::
_xsd_repeatType_indexes_[4] =
{
  ::repeatType::no_repeat,
  ::repeatType::repeat,
  ::repeatType::repeat_x,
  ::repeatType::repeat_y
};

// assets
//

assets::
assets (const base_type& base)
: ::xml_schema::type (),
  base_ (base, this)
{
}

assets::
assets (::std::unique_ptr< base_type > base)
: ::xml_schema::type (),
  base_ (std::move (base), this)
{
}

assets::
assets (const assets& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  base_ (x.base_, f, this)
{
}

assets::
assets (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  base_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void assets::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // base
    //
    if (n.name () == "base" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< base_type > r (
        base_traits::create (i, f, this));

      if (!base_.present ())
      {
        this->base_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!base_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "base",
      "");
  }
}

assets* assets::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class assets (*this, f, c);
}

assets& assets::
operator= (const assets& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->base_ = x.base_;
  }

  return *this;
}

assets::
~assets ()
{
}

// events
//

events::
events ()
: ::xml_schema::type (),
  onEnter_ (this),
  onLeave_ (this),
  onAttacked_ (this),
  onDestroyed_ (this),
  onAttack_ (this)
{
}

events::
events (const events& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  onEnter_ (x.onEnter_, f, this),
  onLeave_ (x.onLeave_, f, this),
  onAttacked_ (x.onAttacked_, f, this),
  onDestroyed_ (x.onDestroyed_, f, this),
  onAttack_ (x.onAttack_, f, this)
{
}

events::
events (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  onEnter_ (this),
  onLeave_ (this),
  onAttacked_ (this),
  onDestroyed_ (this),
  onAttack_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void events::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // onEnter
    //
    if (n.name () == "onEnter" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< onEnter_type > r (
        onEnter_traits::create (i, f, this));

      if (!this->onEnter_)
      {
        this->onEnter_.set (::std::move (r));
        continue;
      }
    }

    // onLeave
    //
    if (n.name () == "onLeave" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< onLeave_type > r (
        onLeave_traits::create (i, f, this));

      if (!this->onLeave_)
      {
        this->onLeave_.set (::std::move (r));
        continue;
      }
    }

    // onAttacked
    //
    if (n.name () == "onAttacked" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< onAttacked_type > r (
        onAttacked_traits::create (i, f, this));

      if (!this->onAttacked_)
      {
        this->onAttacked_.set (::std::move (r));
        continue;
      }
    }

    // onDestroyed
    //
    if (n.name () == "onDestroyed" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< onDestroyed_type > r (
        onDestroyed_traits::create (i, f, this));

      if (!this->onDestroyed_)
      {
        this->onDestroyed_.set (::std::move (r));
        continue;
      }
    }

    // onAttack
    //
    if (n.name () == "onAttack" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< onAttack_type > r (
        onAttack_traits::create (i, f, this));

      if (!this->onAttack_)
      {
        this->onAttack_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

events* events::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class events (*this, f, c);
}

events& events::
operator= (const events& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->onEnter_ = x.onEnter_;
    this->onLeave_ = x.onLeave_;
    this->onAttacked_ = x.onAttacked_;
    this->onDestroyed_ = x.onDestroyed_;
    this->onAttack_ = x.onAttack_;
  }

  return *this;
}

events::
~events ()
{
}

// collider
//

collider::
collider (const size_type& size,
          const hasCollision_type& hasCollision)
: ::xml_schema::type (),
  size_ (size, this),
  hasCollision_ (hasCollision, this)
{
}

collider::
collider (::std::unique_ptr< size_type > size,
          const hasCollision_type& hasCollision)
: ::xml_schema::type (),
  size_ (std::move (size), this),
  hasCollision_ (hasCollision, this)
{
}

collider::
collider (const collider& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  size_ (x.size_, f, this),
  hasCollision_ (x.hasCollision_, f, this)
{
}

collider::
collider (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  size_ (this),
  hasCollision_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void collider::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // size
    //
    if (n.name () == "size" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< size_type > r (
        size_traits::create (i, f, this));

      if (!size_.present ())
      {
        this->size_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!size_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "size",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "hasCollision" && n.namespace_ ().empty ())
    {
      this->hasCollision_.set (hasCollision_traits::create (i, f, this));
      continue;
    }
  }

  if (!hasCollision_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "hasCollision",
      "");
  }
}

collider* collider::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class collider (*this, f, c);
}

collider& collider::
operator= (const collider& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->size_ = x.size_;
    this->hasCollision_ = x.hasCollision_;
  }

  return *this;
}

collider::
~collider ()
{
}

// position
//

position::
position (const x_type& x,
          const y_type& y)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this)
{
}

position::
position (const position& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this)
{
}

position::
position (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void position::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }
}

position* position::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class position (*this, f, c);
}

position& position::
operator= (const position& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
  }

  return *this;
}

position::
~position ()
{
}

// base
//

const base::repeat_type base::repeat_default_value_ (
  "repeat");

base::
base (const file_type& file)
: ::xml_schema::type (),
  file_ (file, this),
  repeat_ (repeat_default_value (), this)
{
}

base::
base (const base& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  file_ (x.file_, f, this),
  repeat_ (x.repeat_, f, this)
{
}

base::
base (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  file_ (this),
  repeat_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
    this->parse (p, f);
  }
}

void base::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // file
    //
    if (n.name () == "file" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< file_type > r (
        file_traits::create (i, f, this));

      if (!file_.present ())
      {
        this->file_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!file_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "file",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "repeat" && n.namespace_ ().empty ())
    {
      this->repeat_.set (repeat_traits::create (i, f, this));
      continue;
    }
  }

  if (!repeat_.present ())
  {
    this->repeat_.set (repeat_default_value ());
  }
}

base* base::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class base (*this, f, c);
}

base& base::
operator= (const base& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->file_ = x.file_;
    this->repeat_ = x.repeat_;
  }

  return *this;
}

base::
~base ()
{
}

// onEnter
//

onEnter::
onEnter ()
: ::xml_schema::type (),
  soundAction_ (this),
  loadAction_ (this)
{
}

onEnter::
onEnter (const onEnter& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  soundAction_ (x.soundAction_, f, this),
  loadAction_ (x.loadAction_, f, this)
{
}

onEnter::
onEnter (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  soundAction_ (this),
  loadAction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void onEnter::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // soundAction
    //
    if (n.name () == "soundAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< soundAction_type > r (
        soundAction_traits::create (i, f, this));

      if (!this->soundAction_)
      {
        this->soundAction_.set (::std::move (r));
        continue;
      }
    }

    // loadAction
    //
    if (n.name () == "loadAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loadAction_type > r (
        loadAction_traits::create (i, f, this));

      if (!this->loadAction_)
      {
        this->loadAction_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

onEnter* onEnter::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class onEnter (*this, f, c);
}

onEnter& onEnter::
operator= (const onEnter& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->soundAction_ = x.soundAction_;
    this->loadAction_ = x.loadAction_;
  }

  return *this;
}

onEnter::
~onEnter ()
{
}

// onLeave
//

onLeave::
onLeave ()
: ::xml_schema::type (),
  soundAction_ (this),
  loadAction_ (this)
{
}

onLeave::
onLeave (const onLeave& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  soundAction_ (x.soundAction_, f, this),
  loadAction_ (x.loadAction_, f, this)
{
}

onLeave::
onLeave (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  soundAction_ (this),
  loadAction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void onLeave::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // soundAction
    //
    if (n.name () == "soundAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< soundAction_type > r (
        soundAction_traits::create (i, f, this));

      if (!this->soundAction_)
      {
        this->soundAction_.set (::std::move (r));
        continue;
      }
    }

    // loadAction
    //
    if (n.name () == "loadAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loadAction_type > r (
        loadAction_traits::create (i, f, this));

      if (!this->loadAction_)
      {
        this->loadAction_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

onLeave* onLeave::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class onLeave (*this, f, c);
}

onLeave& onLeave::
operator= (const onLeave& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->soundAction_ = x.soundAction_;
    this->loadAction_ = x.loadAction_;
  }

  return *this;
}

onLeave::
~onLeave ()
{
}

// onAttacked
//

onAttacked::
onAttacked ()
: ::xml_schema::type (),
  soundAction_ (this),
  loadAction_ (this)
{
}

onAttacked::
onAttacked (const onAttacked& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  soundAction_ (x.soundAction_, f, this),
  loadAction_ (x.loadAction_, f, this)
{
}

onAttacked::
onAttacked (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  soundAction_ (this),
  loadAction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void onAttacked::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // soundAction
    //
    if (n.name () == "soundAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< soundAction_type > r (
        soundAction_traits::create (i, f, this));

      if (!this->soundAction_)
      {
        this->soundAction_.set (::std::move (r));
        continue;
      }
    }

    // loadAction
    //
    if (n.name () == "loadAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loadAction_type > r (
        loadAction_traits::create (i, f, this));

      if (!this->loadAction_)
      {
        this->loadAction_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

onAttacked* onAttacked::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class onAttacked (*this, f, c);
}

onAttacked& onAttacked::
operator= (const onAttacked& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->soundAction_ = x.soundAction_;
    this->loadAction_ = x.loadAction_;
  }

  return *this;
}

onAttacked::
~onAttacked ()
{
}

// onDestroyed
//

onDestroyed::
onDestroyed ()
: ::xml_schema::type (),
  soundAction_ (this),
  loadAction_ (this)
{
}

onDestroyed::
onDestroyed (const onDestroyed& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  soundAction_ (x.soundAction_, f, this),
  loadAction_ (x.loadAction_, f, this)
{
}

onDestroyed::
onDestroyed (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  soundAction_ (this),
  loadAction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void onDestroyed::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // soundAction
    //
    if (n.name () == "soundAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< soundAction_type > r (
        soundAction_traits::create (i, f, this));

      if (!this->soundAction_)
      {
        this->soundAction_.set (::std::move (r));
        continue;
      }
    }

    // loadAction
    //
    if (n.name () == "loadAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loadAction_type > r (
        loadAction_traits::create (i, f, this));

      if (!this->loadAction_)
      {
        this->loadAction_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

onDestroyed* onDestroyed::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class onDestroyed (*this, f, c);
}

onDestroyed& onDestroyed::
operator= (const onDestroyed& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->soundAction_ = x.soundAction_;
    this->loadAction_ = x.loadAction_;
  }

  return *this;
}

onDestroyed::
~onDestroyed ()
{
}

// onAttack
//

onAttack::
onAttack ()
: ::xml_schema::type (),
  soundAction_ (this),
  loadAction_ (this)
{
}

onAttack::
onAttack (const onAttack& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  soundAction_ (x.soundAction_, f, this),
  loadAction_ (x.loadAction_, f, this)
{
}

onAttack::
onAttack (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  soundAction_ (this),
  loadAction_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void onAttack::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // soundAction
    //
    if (n.name () == "soundAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< soundAction_type > r (
        soundAction_traits::create (i, f, this));

      if (!this->soundAction_)
      {
        this->soundAction_.set (::std::move (r));
        continue;
      }
    }

    // loadAction
    //
    if (n.name () == "loadAction" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< loadAction_type > r (
        loadAction_traits::create (i, f, this));

      if (!this->loadAction_)
      {
        this->loadAction_.set (::std::move (r));
        continue;
      }
    }

    break;
  }
}

onAttack* onAttack::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class onAttack (*this, f, c);
}

onAttack& onAttack::
operator= (const onAttack& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->soundAction_ = x.soundAction_;
    this->loadAction_ = x.loadAction_;
  }

  return *this;
}

onAttack::
~onAttack ()
{
}

// size
//

size::
size (const width_type& width,
      const height_type& height)
: ::xml_schema::type (),
  width_ (width, this),
  height_ (height, this)
{
}

size::
size (const size& x,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this)
{
}

size::
size (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f,
      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  width_ (this),
  height_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void size::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // width
    //
    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      if (!width_.present ())
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }
    }

    // height
    //
    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      if (!height_.present ())
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "width",
      "");
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "height",
      "");
  }
}

size* size::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class size (*this, f, c);
}

size& size::
operator= (const size& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->width_ = x.width_;
    this->height_ = x.height_;
  }

  return *this;
}

size::
~size ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::assets >
assets_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::assets_ (isrc, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::assets_ (isrc, h, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::assets_ (isrc, h, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::assets_ (isrc, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::assets_ (isrc, h, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::assets_ (isrc, h, f, p);
}

::std::unique_ptr< ::assets >
assets_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::assets > (
    ::assets_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::assets >
assets_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::assets > (
      ::assets_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "assets" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::assets > r (
      ::xsd::cxx::tree::traits< ::assets, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "assets",
    "");
}

::std::unique_ptr< ::assets >
assets_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "assets" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::assets > r (
      ::xsd::cxx::tree::traits< ::assets, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "assets",
    "");
}

::std::unique_ptr< ::events >
events_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::events_ (isrc, f, p);
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::events_ (isrc, h, f, p);
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::events_ (isrc, h, f, p);
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::events_ (isrc, f, p);
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::events_ (isrc, h, f, p);
}

::std::unique_ptr< ::events >
events_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::events_ (isrc, h, f, p);
}

::std::unique_ptr< ::events >
events_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::events > (
    ::events_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::events >
events_ (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::events > (
      ::events_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "events" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::events > r (
      ::xsd::cxx::tree::traits< ::events, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "events",
    "");
}

::std::unique_ptr< ::events >
events_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "events" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::events > r (
      ::xsd::cxx::tree::traits< ::events, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "events",
    "");
}

::std::unique_ptr< ::collider >
collider_ (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::collider_ (isrc, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::collider_ (isrc, h, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::collider_ (isrc, h, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::collider_ (isrc, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::collider_ (isrc, h, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::collider_ (isrc, h, f, p);
}

::std::unique_ptr< ::collider >
collider_ (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::collider > (
    ::collider_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::collider >
collider_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::collider > (
      ::collider_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "collider" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::collider > r (
      ::xsd::cxx::tree::traits< ::collider, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "collider",
    "");
}

::std::unique_ptr< ::collider >
collider_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "collider" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::collider > r (
      ::xsd::cxx::tree::traits< ::collider, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "collider",
    "");
}

::std::unique_ptr< ::position >
position_ (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::position_ (isrc, f, p);
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::position_ (isrc, h, f, p);
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::position_ (isrc, h, f, p);
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::position_ (isrc, f, p);
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::position_ (isrc, h, f, p);
}

::std::unique_ptr< ::position >
position_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::position_ (isrc, h, f, p);
}

::std::unique_ptr< ::position >
position_ (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::position > (
    ::position_ (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::position >
position_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::position > (
      ::position_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "position" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::position > r (
      ::xsd::cxx::tree::traits< ::position, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "position",
    "");
}

::std::unique_ptr< ::position >
position_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "position" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::position > r (
      ::xsd::cxx::tree::traits< ::position, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "position",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

