// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "Wall-pskel.hxx"

// walls_pskel
//

void walls_pskel::
className_parser (::xml_schema::string_pskel& p)
{
  this->className_parser_ = &p;
}

void walls_pskel::
wall_parser (::wall_pskel& p)
{
  this->wall_parser_ = &p;
}

void walls_pskel::
parsers (::xml_schema::string_pskel& className,
         ::wall_pskel& wall)
{
  this->className_parser_ = &className;
  this->wall_parser_ = &wall;
}

walls_pskel::
walls_pskel ()
: className_parser_ (0),
  wall_parser_ (0)
{
}

// wall_pskel
//

void wall_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void wall_pskel::
level_parser (::xml_schema::id_pskel& p)
{
  this->level_parser_ = &p;
}

void wall_pskel::
baseHealth_parser (::xml_schema::int_pskel& p)
{
  this->baseHealth_parser_ = &p;
}

void wall_pskel::
pricing_parser (::pricing_pskel& p)
{
  this->pricing_parser_ = &p;
}

void wall_pskel::
powers_parser (::powers_pskel& p)
{
  this->powers_parser_ = &p;
}

void wall_pskel::
assets_parser (::assets_pskel& p)
{
  this->assets_parser_ = &p;
}

void wall_pskel::
collider_parser (::collider_pskel& p)
{
  this->collider_parser_ = &p;
}

void wall_pskel::
events_parser (::events_pskel& p)
{
  this->events_parser_ = &p;
}

void wall_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::id_pskel& level,
         ::xml_schema::int_pskel& baseHealth,
         ::pricing_pskel& pricing,
         ::powers_pskel& powers,
         ::assets_pskel& assets,
         ::collider_pskel& collider,
         ::events_pskel& events)
{
  this->name_parser_ = &name;
  this->level_parser_ = &level;
  this->baseHealth_parser_ = &baseHealth;
  this->pricing_parser_ = &pricing;
  this->powers_parser_ = &powers;
  this->assets_parser_ = &assets;
  this->collider_parser_ = &collider;
  this->events_parser_ = &events;
}

wall_pskel::
wall_pskel ()
: name_parser_ (0),
  level_parser_ (0),
  baseHealth_parser_ (0),
  pricing_parser_ (0),
  powers_parser_ (0),
  assets_parser_ (0),
  collider_parser_ (0),
  events_parser_ (0)
{
}

// pricing_pskel
//

void pricing_pskel::
cost_parser (::xml_schema::int_pskel& p)
{
  this->cost_parser_ = &p;
}

void pricing_pskel::
upgrade_parser (::upgrade_pskel& p)
{
  this->upgrade_parser_ = &p;
}

void pricing_pskel::
parsers (::xml_schema::int_pskel& cost,
         ::upgrade_pskel& upgrade)
{
  this->cost_parser_ = &cost;
  this->upgrade_parser_ = &upgrade;
}

pricing_pskel::
pricing_pskel ()
: cost_parser_ (0),
  upgrade_parser_ (0)
{
}

// powers_pskel
//

void powers_pskel::
restoresHP_parser (::xml_schema::int_pskel& p)
{
  this->restoresHP_parser_ = &p;
}

void powers_pskel::
explosionImmune_parser (::xml_schema::boolean_pskel& p)
{
  this->explosionImmune_parser_ = &p;
}

void powers_pskel::
parsers (::xml_schema::int_pskel& restoresHP,
         ::xml_schema::boolean_pskel& explosionImmune)
{
  this->restoresHP_parser_ = &restoresHP;
  this->explosionImmune_parser_ = &explosionImmune;
}

powers_pskel::
powers_pskel ()
: restoresHP_parser_ (0),
  explosionImmune_parser_ (0)
{
}

// upgrade_pskel
//

void upgrade_pskel::
cost_parser (::xml_schema::int_pskel& p)
{
  this->cost_parser_ = &p;
}

void upgrade_pskel::
nextLevel_parser (::xml_schema::idref_pskel& p)
{
  this->nextLevel_parser_ = &p;
}

void upgrade_pskel::
parsers (::xml_schema::int_pskel& cost,
         ::xml_schema::idref_pskel& nextLevel)
{
  this->cost_parser_ = &cost;
  this->nextLevel_parser_ = &nextLevel;
}

upgrade_pskel::
upgrade_pskel ()
: cost_parser_ (0),
  nextLevel_parser_ (0)
{
}

// walls_pskel
//

void walls_pskel::
className (const ::std::string&)
{
}

void walls_pskel::
wall ()
{
}

void walls_pskel::
post_walls ()
{
}

bool walls_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "className" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->className_parser_;

    if (this->className_parser_)
      this->className_parser_->pre ();

    return true;
  }

  if (n == "wall" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->wall_parser_;

    if (this->wall_parser_)
      this->wall_parser_->pre ();

    return true;
  }

  return false;
}

bool walls_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "className" && ns.empty ())
  {
    if (this->className_parser_)
      this->className (this->className_parser_->post_string ());

    return true;
  }

  if (n == "wall" && ns.empty ())
  {
    if (this->wall_parser_)
    {
      this->wall_parser_->post_wall ();
      this->wall ();
    }

    return true;
  }

  return false;
}

// wall_pskel
//

void wall_pskel::
name (const ::std::string&)
{
}

void wall_pskel::
level (const ::std::string&)
{
}

void wall_pskel::
baseHealth (int)
{
}

void wall_pskel::
pricing ()
{
}

void wall_pskel::
powers ()
{
}

void wall_pskel::
assets ()
{
}

void wall_pskel::
collider ()
{
}

void wall_pskel::
events ()
{
}

void wall_pskel::
post_wall ()
{
}

bool wall_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "name" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

    if (this->name_parser_)
      this->name_parser_->pre ();

    return true;
  }

  if (n == "level" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->level_parser_;

    if (this->level_parser_)
      this->level_parser_->pre ();

    return true;
  }

  if (n == "baseHealth" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->baseHealth_parser_;

    if (this->baseHealth_parser_)
      this->baseHealth_parser_->pre ();

    return true;
  }

  if (n == "pricing" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->pricing_parser_;

    if (this->pricing_parser_)
      this->pricing_parser_->pre ();

    return true;
  }

  if (n == "powers" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->powers_parser_;

    if (this->powers_parser_)
      this->powers_parser_->pre ();

    return true;
  }

  if (n == "assets" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->assets_parser_;

    if (this->assets_parser_)
      this->assets_parser_->pre ();

    return true;
  }

  if (n == "collider" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->collider_parser_;

    if (this->collider_parser_)
      this->collider_parser_->pre ();

    return true;
  }

  if (n == "events" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->events_parser_;

    if (this->events_parser_)
      this->events_parser_->pre ();

    return true;
  }

  return false;
}

bool wall_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_)
      this->name (this->name_parser_->post_string ());

    return true;
  }

  if (n == "level" && ns.empty ())
  {
    if (this->level_parser_)
      this->level (this->level_parser_->post_id ());

    return true;
  }

  if (n == "baseHealth" && ns.empty ())
  {
    if (this->baseHealth_parser_)
      this->baseHealth (this->baseHealth_parser_->post_int ());

    return true;
  }

  if (n == "pricing" && ns.empty ())
  {
    if (this->pricing_parser_)
    {
      this->pricing_parser_->post_pricing ();
      this->pricing ();
    }

    return true;
  }

  if (n == "powers" && ns.empty ())
  {
    if (this->powers_parser_)
    {
      this->powers_parser_->post_powers ();
      this->powers ();
    }

    return true;
  }

  if (n == "assets" && ns.empty ())
  {
    if (this->assets_parser_)
    {
      this->assets_parser_->post_assets ();
      this->assets ();
    }

    return true;
  }

  if (n == "collider" && ns.empty ())
  {
    if (this->collider_parser_)
    {
      this->collider_parser_->post_collider ();
      this->collider ();
    }

    return true;
  }

  if (n == "events" && ns.empty ())
  {
    if (this->events_parser_)
    {
      this->events_parser_->post_events ();
      this->events ();
    }

    return true;
  }

  return false;
}

// pricing_pskel
//

void pricing_pskel::
cost (int)
{
}

void pricing_pskel::
upgrade ()
{
}

void pricing_pskel::
post_pricing ()
{
}

bool pricing_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "cost" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cost_parser_;

    if (this->cost_parser_)
      this->cost_parser_->pre ();

    return true;
  }

  if (n == "upgrade" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->upgrade_parser_;

    if (this->upgrade_parser_)
      this->upgrade_parser_->pre ();

    return true;
  }

  return false;
}

bool pricing_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "cost" && ns.empty ())
  {
    if (this->cost_parser_)
      this->cost (this->cost_parser_->post_int ());

    return true;
  }

  if (n == "upgrade" && ns.empty ())
  {
    if (this->upgrade_parser_)
    {
      this->upgrade_parser_->post_upgrade ();
      this->upgrade ();
    }

    return true;
  }

  return false;
}

// powers_pskel
//

void powers_pskel::
restoresHP (int)
{
}

void powers_pskel::
explosionImmune (bool)
{
}

void powers_pskel::
post_powers ()
{
}

bool powers_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "restoresHP" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->restoresHP_parser_;

    if (this->restoresHP_parser_)
      this->restoresHP_parser_->pre ();

    return true;
  }

  if (n == "explosionImmune" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->explosionImmune_parser_;

    if (this->explosionImmune_parser_)
      this->explosionImmune_parser_->pre ();

    return true;
  }

  return false;
}

bool powers_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "restoresHP" && ns.empty ())
  {
    if (this->restoresHP_parser_)
      this->restoresHP (this->restoresHP_parser_->post_int ());

    return true;
  }

  if (n == "explosionImmune" && ns.empty ())
  {
    if (this->explosionImmune_parser_)
      this->explosionImmune (this->explosionImmune_parser_->post_boolean ());

    return true;
  }

  return false;
}

// upgrade_pskel
//

void upgrade_pskel::
cost (int)
{
}

void upgrade_pskel::
nextLevel (const ::std::string&)
{
}

void upgrade_pskel::
post_upgrade ()
{
}

bool upgrade_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "cost" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->cost_parser_;

    if (this->cost_parser_)
      this->cost_parser_->pre ();

    return true;
  }

  if (n == "nextLevel" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->nextLevel_parser_;

    if (this->nextLevel_parser_)
      this->nextLevel_parser_->pre ();

    return true;
  }

  return false;
}

bool upgrade_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "cost" && ns.empty ())
  {
    if (this->cost_parser_)
      this->cost (this->cost_parser_->post_int ());

    return true;
  }

  if (n == "nextLevel" && ns.empty ())
  {
    if (this->nextLevel_parser_)
      this->nextLevel (this->nextLevel_parser_->post_idref ());

    return true;
  }

  return false;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

